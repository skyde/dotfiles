# shellcheck shell=zsh
if [[ -o interactive ]]; then
  stty -ixon -ixoff
fi

export PATH=/Users/skydebreuil/Projects/depot_tools:$PATH

# Path setup (add custom bins before system paths)
for d in "$HOME/.local/bin" "$HOME/bin" "/usr/local/bin"; do
  if [[ -d $d ]] && [[ ":$PATH:" != *":$d:"* ]]; then
    export PATH="$d:$PATH"
  fi
done

# Default editor
export EDITOR="nvim"
export VISUAL="$EDITOR"

# Shell Options
setopt autocd             # Enter directory just by typing its name
# Disable automatic command correction
# setopt correct
setopt nocaseglob         # Case insensitive globbing
setopt extended_glob      # Extended globbing
setopt hist_ignore_all_dups  # Donâ€™t store duplicate history
setopt share_history         # Share command history between sessions
setopt inc_append_history     # Append to history file immediately
setopt hist_ignore_space      # Ignore commands starting with spaces
setopt globdots               # Include dotfiles in globbing

# History
HISTSIZE=50000
SAVEHIST=50000
HISTFILE=~/.zsh_history

# Key Bindings
bindkey -v                # Use vim keybindings
KEYTIMEOUT=1              # Reduce delay for ESC
bindkey '^[[1;5C' forward-word     # Ctrl+Right
bindkey '^[[1;5D' backward-word    # Ctrl+Left

# Bootstrap Starship
eval "$(starship init zsh)"

# Zsh Plugins: autosuggestions & syntax-highlighting
# Load from common installation paths without relying on brew
for plugin in zsh-autosuggestions zsh-syntax-highlighting; do
  for dir in "/usr/local/share/$plugin" "/opt/homebrew/share/$plugin" "/usr/share/$plugin"; do
    if [[ -r "$dir/$plugin.zsh" ]]; then
      source "$dir/$plugin.zsh"
      break
    fi
  done
done

# Autocomplete
autoload -Uz compinit && compinit
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'

# zoxide
eval "$(zoxide init zsh)"

# FZF integration
if command -v fzf >/dev/null; then
  for dir in \
    "/usr/share/fzf" \
    "/usr/local/opt/fzf/shell" \
    "/opt/homebrew/opt/fzf/shell" \
    "/usr/share/doc/fzf/examples" \
    "$HOME/.fzf"; do
    if [[ -r "$dir/key-bindings.zsh" ]]; then
      source "$dir/key-bindings.zsh"
      break
    fi
  done
  for dir in \
    "/usr/share/fzf" \
    "/usr/local/opt/fzf/shell" \
    "/opt/homebrew/opt/fzf/shell" \
    "/usr/share/doc/fzf/examples" \
    "$HOME/.fzf"; do
    if [[ -r "$dir/completion.zsh" ]]; then
      source "$dir/completion.zsh"
      break
    fi
  done
  if command -v fd >/dev/null; then
    export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git --color=always --style=minimal'
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  fi
  # if [[ $FIND_IT_FASTER_ACTIVE -eq 1 ]]; then
    # export FZF_DEFAULT_OPTS='--reverse --style=minimal --delimiter : --with-nth 1,4.. --ansi --no-hscroll --keep-right --hscroll-off=60'
    # export FZF_DEFAULT_OPTS='--bind=preview-up:ignore,preview-down:ignore,preview-page-up:ignore,preview-page-down:ignore'
    # "FZF_DEFAULT_OPTS": "--delimiter : --with-nth 1,4.. --ansi --no-hscroll --keep-right --hscroll-off=60"
  # fi
fi

if (( $+commands[fzf] )); then
  function _fzf_history_widget() {
    local selected
    selected=$(
      fc -nrl 1 |                  \
      awk '!seen[$0]++' |          \
      fzf  --height=80%            \
           --reverse               \
           --tiebreak=index        \
           --no-sort               \
           --prompt='History> '    \
           --style=minimal    \
           --query="$LBUFFER"      
    ) || return

    LBUFFER=$selected
    zle redisplay
  }

  zle -N _fzf_history_widget
  bindkey '^R' _fzf_history_widget
fi

# Aliases
alias z='cd'
alias grep="grep --color=auto"
# Use modern replacements if available
command -v bat >/dev/null && alias cat='bat'
if command -v eza >/dev/null; then
  alias ls='eza --color=auto --group-directories-first'
  alias ll='eza -al --color=auto --group-directories-first'
  alias la='eza -a --color=auto --group-directories-first'
fi
if [[ -z $(command -v fd 2>/dev/null) && -n $(command -v fdfind 2>/dev/null) ]]; then
  alias fd='fdfind'
fi

# Open yazi in the current directory and change to its exit path
function y() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
  yazi "$@" --cwd-file="$tmp"
  IFS= read -r -d '' cwd < "$tmp"
  [ -n "$cwd" ] && [ "$cwd" != "$PWD" ] && builtin cd -- "$cwd"
  rm -f -- "$tmp"
}
