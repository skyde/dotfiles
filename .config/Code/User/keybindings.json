// Place your key bindings in this file to override the defaults
[
  // Disable line move shortcuts
  { "key": "alt+down", "command": "-editor.action.moveLinesDownAction" },
  { "key": "alt+up", "command": "-editor.action.moveLinesUpAction" },
  {
    // Ctrl left to jump words
    "key": "ctrl+left",
    "command": "cursorWordStartLeft",
    "when": "editorTextFocus"
  },
  {
    // Ctrl right to jump words
    "key": "ctrl+right",
    "command": "cursorWordEndRight",
    "when": "editorTextFocus"
  },
  // Page Down - workround to make cursor movement match Nvim
  {
    "key": "pagedown",
    "command": "runCommands",
    "when": "textInputFocus",
    "args": {
      "commands": [
        "scrollPageDown",
        {
          "command": "cursorMove",
          "args": { "to": "viewPortTop", "by": "line" }
        },
        // This makes it so that if you move in a direction your cursor will 'follow' you
        // This moves the cursor down from the top of the screen to match 'cursor surrounding lines' in settings.json
        // Some custom logic is required to get this to work fully in VSCode to match NVim, if you don't do this the
        // navigation by paging is very confusing since doing an edit will then jump you back to where you were a long time ago.
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown"
      ]
    }
  },

  // Page Up - workround to make cursor movement match Nvim
  {
    "key": "pageup",
    "command": "runCommands",
    "when": "textInputFocus",
    "args": {
      "commands": [
        "scrollPageUp",
        {
          "command": "cursorMove",
          "args": { "to": "viewPortBottom", "by": "line" }
        },
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp"
      ]
    }
  },
  // Build
  {
    "key": "shift+f2",
    "command": "workbench.action.debug.start",
    "when": "taskCommandsRegistered"
  },
  // Fuzzy find class / file by name
  {
    "key": "shift+f3",
    "command": "workbench.action.quickOpen"
  },
  // Scroll up 16 Lines
  // Matches Nvim where small scrolls will keep the cursor in exacty the same relative place on the screen
  {
    "key": "shift+f4",
    "command": "runCommands",
    "when": "textInputFocus",
    "args": {
      "commands": [
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp"
      ]
    }
  },
  // Scroll down 16 Lines
  {
    "key": "shift+f6",
    "command": "runCommands",
    "when": "textInputFocus",
    "args": {
      "commands": [
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown"
      ]
    }
  },
  // Stop Build / Stop Debugging
  {
    "key": "shift+f7",
    "command": "runCommands",
    "args": {
      "commands": [
        // "workbench.action.tasks.terminate",
        "workbench.action.debug.stop"
      ]
    }
  },
  // Goto Definition
  {
    "key": "shift+f8",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus"
  },
  // Toggle Comment
  {
    "key": "shift+f11",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus"
  },
  // Change within current file
  // Makes the standard cmd-f shortcut map to the / key
  // Useful as I have a macro mapped to cmd-f
  {
    "key": "cmd+f",
    "command": "runCommands",
    "when": "editorTextFocus",
    "args": {
      "commands": [
        "extension.vim_escape",
        {
          "command": "vim.remap",
          "args": { "after": ["/"] }
        }
      ]
    }
  },
  // Global fuzzy find within files (uses rip grep)
  {
    "key": "shift+cmd+f",
    "command": "runCommands",
    "args": {
      "commands": [
        // Automatically search for the word under the cursor
        "editor.action.addSelectionToNextFindMatch",
        "fzf-picker.findWithinFiles",
        "extension.vim_escape"
      ]
    }
  },
  {
    // Toggle the panel at the bottom of the screen
    "key": "ctrl+t",
    "command": "runCommands",
    "args": {
      "commands": ["workbench.action.togglePanel"]
    }
  },
  // {
  //   "key": "cmd+r",
  //   "command": "workbench.action.closePanel",
  //   "when": "panelVisible"
  // },
  // {
  //   "key": "cmd+r",
  //   "when": "!panelVisible",
  //   "command": "runCommands",
  //   "args": {
  //     "commands": [
  //       // When the are closing the terminal disable fullscreen mode so
  //       // subsequent usage of the terminal is not fullscreen
  //       // "workbench.action.toggleMaximizedPanel",
  //       // Show the terminal
  //       "workbench.action.terminal.toggleTerminal",
  //       // Auto select the main terminal
  //       "workbench.action.terminal.focusAtIndex1"
  //     ]
  //   }
  // },
  {
    // Close the editor terminal as soon as ctrl+t is pressed - things that launch into there should be transient
    "key": "ctrl+t",
    "command": "runCommands",
    "when": "terminalFocus && terminalEditorActive",
    "args": {
      "commands": [
        "workbench.action.unpinEditor",
        "workbench.action.revertAndCloseActiveEditor"
      ]
    }
  },
  // Duplicate terminal commands to run with ctrl+/ as well
  {
    // Show the bottom panel if it's not visible
    "key": "ctrl+/",
    "command": "runCommands",
    "args": {
      "commands": ["workbench.action.togglePanel"]
    }
  },
  {
    // Close the editor terminal as soon as ctrl+/ is pressed - things that launch into there should be transient
    "key": "ctrl+/",
    "command": "runCommands",
    "when": "terminalFocus && terminalEditorActive",
    "args": {
      "commands": [
        "workbench.action.unpinEditor",
        "workbench.action.revertAndCloseActiveEditor"
      ]
    }
  },
  {
    "key": "ctrl+m",
    "command": "runCommands",
    "when": "terminalFocus",
    "args": {
      "commands": ["workbench.action.toggleMaximizedPanel"]
    }
  },
  {
    "key": "cmd+d",
    "command": "runCommands",
    "when": "terminalFocus",
    "args": {
      "commands": ["workbench.action.terminal.kill"]
    }
  },
  // File explorer & Git
  // {
  //   "command": "workbench.action.toggleSidebarVisibility",
  //   "key": "escape",
  //   "when": "sideBarVisible && !editorFocus"
  // },
  {
    "command": "workbench.action.focusActiveEditorGroup",
    "key": "escape",
    "when": "(sideBarVisible || auxiliaryBarVisible) && !editorFocus && !terminalFocus"
  },
  // // Copilot Chat
  // {
  //   // Focus back to the editor
  //   "key": "escape",
  //   "command": "workbench.action.focusActiveEditorGroup",
  //   "when": "inputFocus && view.workbench.panel.chat.view.copilot.visible && !editorFocus && !terminalFocus"
  // },
  // Explorer
  {
    "key": "o",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "command": "renameFile",
    "key": "c",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+o",
    "command": "explorer.newFolder",
    "when": "explorerViewletFocus"
  },
  {
    "command": "deleteFile",
    "key": "d",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // Diff
  {
    // Goto next change
    "key": "alt+down",
    "command": "workbench.action.compareEditor.nextChange",
    "when": "textCompareEditorVisible && editorTextFocus"
  },
  {
    // Goto previous change
    "key": "alt+up",
    "command": "workbench.action.compareEditor.previousChange",
    "when": "textCompareEditorVisible && editorTextFocus"
  },

  // Merging
  {
    "key": "alt+down",
    "command": "merge.goToNextUnhandledConflict",
    "when": "isMergeEditor"
  },
  {
    "key": "alt+up",
    "command": "merge.goToPreviousUnhandledConflict",
    "when": "isMergeEditor"
  },
  // Debug Navigation
  {
    "key": "alt+down",
    "command": "workbench.action.debug.stepOver",
    "when": "inDebugMode && debugState == 'stopped' && editorTextFocus"
  },
  {
    "key": "alt+up",
    "command": "workbench.action.debug.stepInto",
    "when": "inDebugMode && debugState == 'stopped' && editorTextFocus"
  },
  {
    "key": "alt+h",
    "command": "workbench.action.debug.stepOut",
    "when": "inDebugMode && debugState == 'stopped' && editorTextFocus"
  },
  // Selection
  {
    "key": "ctrl-n",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
  },
  // Editor terminal
  {
    "key": "ctrl+tab",
    "command": "workbench.action.nextEditor",
    "when": "isWindows"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.previousEditor",
    "when": "isWindows"
  },
  {
    "key": "cmd+s",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u001B[15;2~" }, // sends Shift‑F5
    "when": "terminalFocus"
  },
  {
    "key": "alt+o",
    "command": "clangd.switchheadersource",
    "when": "editorTextFocus && resourceLangId == 'c' || editorTextFocus && resourceLangId == 'cpp' || editorTextFocus && resourceLangId == 'cuda-cpp' || editorTextFocus && resourceLangId == 'objective-c' || editorTextFocus && resourceLangId == 'objective-cpp'"
  },
  {
    // When opening files from terminal it leaves the terminal in a half open state at the bottom of the screen - close this if required
    "key": "enter",
    "command": "runCommands",
    "when": "(terminalFocus || problemFocus) && closePanelOnEnter",
    "args": {
      "commands": [
        {
          // Send the enter keycode
          "command": "workbench.action.terminal.sendSequence",
          // Enter keycode
          "args": { "text": "\u000D" }
        },
        // Close the terminal
        "workbench.action.togglePanel",
        "extension.vim_escape"
      ]
    }
  }
  // {
  //   // There is an issue in the find it faster plugin where it does go back to your last focused window when closed
  //   "key": "escape",
  //   "command": "runCommands",
  //   // This only activates when the 'editor as a tab' mode is active. Would be better to
  //   "when": "terminalFocus && terminalEditorActive",
  //   "args": {
  //     "commands": [
  //       {
  //         "command": "workbench.action.terminal.sendSequence",
  //         // Enter keycode
  //         "args": { "text": "\u001D" }
  //       }
  //       // "workbench.action.focusActiveEditorGroup",
  //       // "workbench.action.navigateBack",
  //       // "extension.vim_escape"
  //     ]
  //   }
  // }
]
