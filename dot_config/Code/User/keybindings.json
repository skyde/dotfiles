// Place your key bindings in this file to override the defaults
[
  // Page Down - workround to make cursor movement match Nvim
  {
    "key": "pagedown",
    "command": "runCommands",
    "when": "textInputFocus",
    "args": {
      "commands": [
        "scrollPageDown",
        {
          "command": "cursorMove",
          "args": { "to": "viewPortTop", "by": "line" }
        },
        // This makes it so that if you move in a direction your cursor will 'follow' you
        // This moves the cursor down from the top of the screen to match 'cursor surrounding lines' in settings.json
        // Some custom logic is required to get this to work fully in VSCode to match NVim, if you don't do this the
        // navigation by paging is very confusing since doing an edit will then jump you back to where you were a long time ago.
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown"
      ]
    }
  },

  // Page Up - workround to make cursor movement match Nvim
  {
    "key": "pageup",
    "command": "runCommands",
    "when": "textInputFocus",
    "args": {
      "commands": [
        "scrollPageUp",
        {
          "command": "cursorMove",
          "args": { "to": "viewPortBottom", "by": "line" }
        },
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp"
      ]
    }
  },
  // Build
  {
    "key": "shift+f2",
    "command": "workbench.action.debug.start",
    "when": "taskCommandsRegistered"
  },
  // Fuzzy find class / file by name
  {
    "key": "shift+f3",
    "command": "workbench.action.quickOpen"
  },
  // Scroll up 16 Lines
  // Matches Nvim where small scrolls will keep the cursor in exacty the same relative place on the screen
  {
    "args": {
      "commands": [
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp"
      ]
    }
  },

  // Scroll down 16 Lines
  {
    "key": "shift+f6",
    "command": "runCommands",
    "when": "textInputFocus",
    "args": {
      "commands": [
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown"
      ]
    }
  },
  // Stop Build / Stop Debugging
  {
    "key": "shift+f7",
    "command": "workbench.action.debug.stop"
  },
  // Goto Definition
  {
    "key": "shift+f8",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus"
  },
  // Toggle Comment
  {
    "key": "shift+f11",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus"
  },
  // Change within current file
  // Makes the standard cmd-f shortcut map to the / key
  // Useful as I have a macro mapped to cmd-f
  {
    "key": "cmd+f",
    "command": "runCommands",
    "when": "editorTextFocus",
    "args": {
      "commands": [
        "extension.vim_escape",
        {
          "command": "vim.remap",
          "args": { "after": ["/"] }
        }
      ]
    }
  },
  // Global fuzzy find within files (uses rip grep)
  {
    "key": "shift+cmd+f",
    "command": "runCommands",
    "args": {
      "commands": [
        // Automatically search for the word under the cursor
        "editor.action.addSelectionToNextFindMatch",
        "find-it-faster.findWithinFiles",
        "extension.vim_escape"
      ]
    }
  },
  // Terminal
  {
    // Open the terminal form the editor
    // Ensure it opens full screen
    "key": "ctrl+/",
    "when": "!terminalFocus",
    "command": "runCommands",
    "args": {
      "commands": [
        // Fullscreen terminal
        "workbench.action.toggleMaximizedPanel",
        // Use this if you want the terminal just to pop up partially at the bottom
        // "workbench.action.terminal.toggleTerminal",
        // When opening a terminal ensure we focus terminal 1 - as the Find it Faster plugin opens other terminals
        "workbench.action.terminal.focusAtIndex1"
      ]
    }
  },
  {
    // Open the terminal form the editor
    // Ensure it opens full screen
    "key": "cmd+t",
    "when": "!terminalFocus",
    "command": "runCommands",
    "args": {
      "commands": [
        // Fullscreen terminal
        "workbench.action.toggleMaximizedPanel",
        // Use this if you want the terminal just to pop up partially at the bottom
        // "workbench.action.terminal.toggleTerminal",
        // When opening a terminal ensure we focus terminal 1 - as the Find it Faster plugin opens other terminals
        "workbench.action.terminal.focusAtIndex1"
      ]
    }
  },
  {
    // If the terminal is focused then close it
    "key": "ctrl+/",
    "when": "terminalFocus",
    "command": "workbench.action.terminal.toggleTerminal"
  },
  {
    // If the terminal is focused then close it
    "key": "cmd+t",
    "when": "terminalFocus",
    "command": "workbench.action.terminal.toggleTerminal"
  },
  // File explorer & Git
  {
    "command": "workbench.action.toggleSidebarVisibility",
    "key": "escape",
    "when": "sideBarVisible && !editorFocus"
  },
  {
    "key": "ctrl+l",
    "command": "diffEditor.switchSide",
    "when": "isInDiffEditor"
  },
  {
    "key": "ctrl+h",
    "command": "diffEditor.switchSide",
    "when": "isInDiffEditor"
  },
  // Copilot Chat
  {
    // Focus back to the editor
    "key": "escape",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "view.workbench.panel.chat.view.copilot.visible && !editorFocus"
  },
  // // Git
  // {
  //   "command": "workbench.action.toggleSidebarVisibility",
  //   "key": "escape",
  //   "when": "explorerViewletVisible && !inputFocus"
  // },
  // Explorer
  {
    "key": "o",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "command": "renameFile",
    "key": "c",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+o",
    "command": "explorer.newFolder",
    "when": "explorerViewletFocus"
  },
  {
    "command": "deleteFile",
    "key": "d",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // Diff
  {
    // Goto next change
    "key": "alt+l",
    "command": "workbench.action.compareEditor.previousChange",
    "when": "textCompareEditorVisible && editorTextFocus"
  },
  {
    // Goto previous change
    "key": "alt+h",
    "command": "workbench.action.compareEditor.nextChange",
    "when": "textCompareEditorVisible && editorTextFocus"
  },

  {
    // Revert the selected hunk
    "key": "alt+k",
    "command": "git.revertSelectedRanges",
    "when": "isInDiffEditor && !isInDiffLeftEditor && editorTextFocus"
  },
  {
    // Stage the selected hunk
    "key": "ctrl+j",
    "command": "git.stageSelectedRanges",
    "when": "isInDiffEditor && !isInDiffLeftEditor && editorTextFocus"
  },
  {
    // Unstage the selected hunk - this is not working for some reason but maybe would in some context
    "key": "ctrl+alt+j",
    "command": "git.unstageSelectedRanges",
    "when": "isInDiffEditor && !isInDiffLeftEditor && editorTextFocus"
  },

  {
    // Fallback revert
    "key": "alt+shift+k",
    "command": "diffEditor.revert",
    "when": "isInDiffEditor && editorTextFocus"
  },

  {
    // Pop up an in place 'peek' of the next diff in any file you are editing
    "key": "alt+l",
    "command": "editor.action.dirtydiff.previous",
    "when": "editorTextFocus && !isInDiffEditor"
  },
  {
    // Pop up an in place 'peek' of the previous diff in any file you are editing
    "key": "alt+h",
    "command": "editor.action.dirtydiff.next",
    "when": "editorTextFocus && !isInDiffEditor"
  },
  // Merging
  {
    "key": "alt+k",
    "command": "merge-conflict.accept.current",
    "when": "(isMergeEditor || mergeConflictsCount > 0) && editorTextFocus"
  },
  {
    "key": "ctrl+alt+k",
    "command": "merge-conflict.accept.all-current",
    "when": "(isMergeEditor || mergeConflictsCount > 0) && editorTextFocus"
  },
  {
    "key": "alt+j",
    "command": "merge-conflict.accept.incoming",
    "when": "(isMergeEditor || mergeConflictsCount > 0) && editorTextFocus"
  },
  {
    "key": "ctrl+alt+j",
    "command": "merge-conflict.accept.all-incoming",
    "when": "(isMergeEditor || mergeConflictsCount > 0) && editorTextFocus"
  },
  {
    "key": "alt+h",
    "command": "merge.goToNextUnhandledConflict",
    "when": "(isMergeEditor || mergeConflictsCount > 0) && editorTextFocus"
  },
  {
    "key": "ctrl+alt+h",
    "command": "merge-conflict.next",
    "when": "(isMergeEditor || mergeConflictsCount > 0) && editorTextFocus"
  },
  {
    "key": "ctrl+alt+l",
    "command": "merge-conflict.previous",
    "when": "(isMergeEditor || mergeConflictsCount > 0) && editorTextFocus"
  },
  {
    "key": "alt+l",
    "command": "merge.goToPreviousUnhandledConflict",
    "when": "(isMergeEditor || mergeConflictsCount > 0) && editorTextFocus"
  },
  // Debug Navigation
  {
    "key": "alt+h",
    "command": "workbench.action.debug.stepOver",
    "when": "inDebugMode && debugState == 'stopped' && editorTextFocus"
  },
  {
    "key": "alt+l",
    "command": "workbench.action.debug.stepInto",
    "when": "inDebugMode && debugState == 'stopped' && editorTextFocus"
  },
  {
    "key": "alt+k",
    "command": "workbench.action.debug.stepOut",
    "when": "inDebugMode && debugState == 'stopped' && editorTextFocus"
  },
  // Selection
  {
    "key": "ctrl-n",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
  },

  // // Code
  // {
  //   "command": "editor.action.codeAction",
  //   "key": "space c e",
  //   "when": "vim.mode == 'Normal' && editorTextFocus"
  // }
  // Editor terminal
  {
    // Close the editor terminal as soon as escape is pressed - things that launch into there should be transient
    "key": "escape",
    "command": "runCommands",
    "when": "terminalFocus && terminalEditorActive",
    "args": {
      "commands": [
        "workbench.action.unpinEditor",
        "workbench.action.revertAndCloseActiveEditor"
      ]
    }
  },
  {
    "key": "shift+left",
    "command": "workbench.action.previousEditor",
    "when": "isWindows"
  },
  {
    "key": "shift+right",
    "command": "workbench.action.nextEditor",
    "when": "isWindows"
  }
  // Terminal
  // {
  //   // There is an issue with the find it faster plugin where it does not focus your last editor when you press escape, so this fixes that
  //   "key": "escape",
  //   "command": "runCommands",
  //   // This only activates when the 'editor as a tab' mode is active. Would be better to use a context set by the find it faster plugin
  //   "when": "terminalFocus && terminalEditorActive",
  //   "args": {
  //     "commands": [
  //       {
  //         "command": "workbench.action.terminal.sendSequence",
  //         // Escape keycode
  //         "args": { "text": "\u001b" }
  //       },
  //       "workbench.action.focusActiveEditorGroup",
  //       "workbench.action.navigateBack",
  //       "extension.vim_escape"
  //     ]
  //   }
  // },
  // {
  //   // There is an issue in the find it faster plugin where it does not clear your last selection when you do a search, so this fixes that
  //   "key": "enter",
  //   "command": "runCommands",
  //   // This only activates when the 'editor as a tab' mode is active. Would be better to use a context set by the find it faster plugin
  //   "when": "terminalFocus && terminalEditorActive",
  //   "args": {
  //     "commands": [
  //       {
  //         "command": "workbench.action.terminal.sendSequence",
  //         // Enter keycode
  //         "args": { "text": "\u000D" }
  //       },
  //       "workbench.action.focusActiveEditorGroup",
  //       "workbench.action.navigateBack",
  //       "extension.vim_escape"
  //     ]
  //   }
  // }
]
