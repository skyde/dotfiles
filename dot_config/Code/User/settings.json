{
  // Cursor navigation settings
  "editor.cursorSurroundingLines": 8,
  "editor.cursorSurroundingLinesStyle": "all",
  "editor.scrollBeyondLastLine": false,
  "editor.stickyScroll.enabled": false,
  // Copilot Chat configuration
  "github.copilot.chat.agent.thinkingTool": true,
  "chat.agent.enabled": true,
  "github.copilot.chat.codesearch.enabled": true,
  "chat.agent.maxRequests": 10000,
  "chat.editing.confirmEditRequestRemoval": false,
  "chat.editing.confirmEditRequestRetry": false,
  // Prompt when opening files from untrusted workspaces
  "security.workspace.trust.untrustedFiles": "prompt",
  // Increase terminal scrollback similar to using a terminal split in Neovim
  "terminal.integrated.scrollback": 10000,
  "editor.fontFamily": "JetBrainsMono Nerd Font, JetBrains Mono, monospace",
  "editor.fontLigatures": true,
  "terminal.integrated.fontFamily": "JetBrainsMono Nerd Font, JetBrains Mono, monospace",
  "terminal.integrated.defaultProfile.linux": "zsh",
  "terminal.integrated.defaultProfile.osx": "zsh",
  "terminal.integrated.defaultProfile.windows": "pwsh",
  // Forward Ctrl+S to the terminal by removing the save command from the skip list
  "terminal.integrated.commandsToSkipShell": ["-workbench.action.files.save"],
  "editor.formatOnSave": true,
  "window.zoomLevel": 0.2,
  // Cursor Shape & Style
  "editor.cursorStyle": "block-outline",
  // Used when VIM is disabled
  "editor.cursorWidth": 3,
  // Highlighting
  "editor.semanticHighlighting.enabled": true,
  "editor.selectionHighlight": false,
  "editor.occurrencesHighlight": false,
  "workbench.colorCustomizations": {
    // Custom cursor color - do not change
    "editorCursor.foreground": "#FF5000",
    "editorCursor.background": "#000000",
    // "statusBar.background": "#1E1E1E"

    // Simple Black Background
    "statusBar.background": "#000000",
    "statusBar.noFolderBackground": "#000000",
    "statusBar.debuggingBackground": "#000000",
    "editor.background": "#000000",
    "tab.activeBackground": "#301000",
    "tab.inactiveBackground": "#000000",
    "tab.activeBorderTop": "#AA4000",
    "editorGroupHeader.tabsBackground": "#000000",
    "editorLineNumber.foreground": "#585858",

    // Scroll Bar
    "scrollbarSlider.background": "#ffffff17",

    // Inlays
    "editorInlayHint.foreground": "#606060",
    "editorInlayHint.background": "#00000000"
  },
  // Custom color scheme
  "editor.tokenColorCustomizations": {
    "textMateRules": [
      { "scope": "source", "settings": { "foreground": "#D4D4D4" } },
      { "scope": "keyword", "settings": { "foreground": "#86C9EF" } },
      {
        "scope": "entity.name.function.preprocessor",
        "settings": { "foreground": "#C255C5" }
      },
      {
        "scope": "string.quoted",
        "settings": { "foreground": "#DFA67C" }
      },
      {
        "scope": "keyword.control",
        "settings": { "foreground": "#ECBC6F" }
      },
      {
        "scope": "keyword.operator",
        "settings": { "foreground": "#DFDFBE" }
      },
      {
        "scope": ["constant.numeric", "keyword.other.unit.suffix"],
        "settings": { "foreground": "#5796BE" }
      },
      { "scope": "string", "settings": { "foreground": "#8FAFDF" } },
      {
        "scope": "constant.character.escape",
        "settings": { "foreground": "#D7BA7D" }
      },
      { "scope": "punctuation", "settings": { "foreground": "#DFDDB9" } },
      {
        "scope": ["comment", "punctuation.definition.comment"],
        "settings": { "foreground": "#7A987A" }
      },
      {
        "scope": "punctuation.section.arguments",
        "settings": { "foreground": "#F89500" }
      },
      {
        "scope": "punctuation.definition.tag",
        "settings": { "foreground": "#808080" }
      },
      { "scope": "entity.name.type", "settings": { "foreground": "#4EC9B0" } },
      {
        "scope": "entity.name.type.interface",
        "settings": { "foreground": "#B8D7A3" }
      },
      {
        "scope": "variable.other.enummember",
        "settings": { "foreground": "#4FC1FF" }
      },
      // Functions
      {
        "scope": "entity.name.function",
        "settings": { "foreground": "#DCDCAA" }
      },
      // Namespace
      {
        "scope": "meta.head.namespace",
        "settings": { "foreground": "#7BCFE6" }
      },
      // Built in types
      {
        "scope": [
          "storage.type",
          "storage.type.built-in",
          "keyword.type",
          "support.type"
        ],
        "settings": { "foreground": "#ECB763" }
      },
      // Casts
      {
        "scope": "keyword.operator.cast",
        "settings": { "foreground": "#ECB763" }
      },
      // Local variable
      {
        "scope": "variable",
        "settings": { "foreground": "#9CDCFE" }
      },
      // Class member variable
      {
        "scope": "variable.other.object",
        "settings": { "foreground": "#DD9DC2" }
      },
      {
        "scope": "markup.underline.link",
        "settings": { "foreground": "#8FAFDF" }
      }
    ]
  },
  // "editor.semanticTokenColorCustomizations": {
  //   "enabled": true,
  //   "rules": {
  //     // "variable.local": "#EFC986",
  //     "variable.readonly": "#D4D4D4",
  //     "parameter": "#D4D4D4",
  //     "property": "#D4D4D4",
  //     "enumMember": "#4FC1FF",
  //     "function": "#9CDCFE",
  //     "method": "#9CDCFE",
  //     "class": "#4EC9B0",
  //     "struct": "#4EC9B0",
  //     "interface": "#B8D7A3",
  //     "typeParameter": "#4EC9B0",
  //     "type": "#4EC9B0",
  //     "number": "#BE966E",
  //     "string": "#8FAFDF",
  //     "comment": "#7A987A",
  //     "keyword": "#86C9EF",
  //     "operator": "#666666",
  //     "namespace": "#4EC9B0"
  //     // "type.defaultLibrary": "#00FFCC bold" // built-in types like float
  //     // "type": "#00FFCC italic" // fallback for other types
  //   }
  // },
  // Cursor
  "editor.cursorBlinking": "solid", // options: "blink", "smooth", "phase", "expand", "solid"
  "editor.cursorSmoothCaretAnimation": "off", // only with "smooth" blinking
  // Editor UI to match Vim configuration
  "editor.lineNumbers": "relative",
  "editor.renderLineHighlight": "none",
  // Use system clipboard in Vim extension
  "vim.useSystemClipboard": true,
  // Control select keys in Vim
  "vim.useCtrlKeys": true,
  "vim.handleKeys": {
    "<tab>": false,
    "<S-tab>": false,
    "<C-o>": true,
    "<C-i>": true
  },
  // Use physical key codes so Alt based shortcuts work on custom layouts
  "keyboard.dispatch": "keyCode",
  // Search behaviour like Vim
  "vim.ignorecase": true,
  "vim.smartcase": true,
  "vim.incsearch": true,
  "vim.hlsearch": true,
  "vim.startofline": false,
  // Highlighted Yank
  "vim.highlightedyank.enable": true,
  "vim.highlightedyank.duration": 125,
  // Surround
  "vim.surround": true,
  // Camel Case Motion - disabed for now as conflicts with other bindings
  // "vim.camelCaseMotion.enable": true,
  // Optimized for Colemak-Mod-DH
  "vim.easymotionKeys": "tsraneiodhgmplfuc,bjvk",
  // Leader key and custom key mappings
  "vim.leader": "<space>",
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": ["<leader>", "v"],
      "after": ["<C-v>"]
    },
    {
      "before": ["<tab>"],
      "commands": ["editor.action.indentLines"]
    },
    {
      "before": ["<S-tab>"],
      "commands": ["editor.action.outdentLines"]
    },
    {
      "before": ["<D-Left>"],
      "commands": ["workbench.action.navigateBack"]
    },
    {
      "before": ["<D-Right>"],
      "commands": ["workbench.action.navigateForward"]
    },
    { "before": ["<C-o>"], "commands": ["workbench.action.navigateBack"] },
    { "before": ["<C-i>"], "commands": ["workbench.action.navigateForward"] },
    { "before": ["<C-h>"], "commands": ["workbench.action.focusLeftGroup"] },
    { "before": ["<C-l>"], "commands": ["workbench.action.focusRightGroup"] },
    { "before": ["<C-j>"], "commands": ["workbench.action.focusBelowGroup"] },
    { "before": ["<C-k>"], "commands": ["workbench.action.focusAboveGroup"] },
    {
      "before": ["<Esc>"],
      "after": ["<Esc>"],
      "commands": [":nohl"]
    },
    {
      // Use Visual Studio code undo rather than VSVim
      "before": ["u"],
      "commands": [{ "command": "undo" }]
    },
    {
      // Use Visual Studio code redo rather than VSVim
      "before": ["<C-r>"],
      "commands": [{ "command": "redo" }]
    },
    {
      "before": ["Y"],
      "after": ["y", "$"]
    },
    // Sidebar
    {
      "before": ["<leader>", "r"],
      "commands": ["workbench.action.toggleSidebarVisibility"]
    },
    // Copilot Chat
    {
      "before": ["<leader>", "a"],
      "commands": ["workbench.action.chat.open"]
    },
    {
      // Close Copilot Chat
      "before": ["<leader>", "A"],
      "commands": ["workbench.action.toggleAuxiliaryBar"]
    },
    // UI
    {
      // Toggle word wrap
      "before": ["<leader>", "u", "w"],
      "commands": ["editor.action.toggleWordWrap"]
    },
    {
      // Toggle zen mode
      "before": ["<leader>", "u", "z"],
      "commands": ["workbench.action.toggleZenMode"]
    },
    {
      // Render whitespace (conceal)
      "before": ["<leader>", "u", "c"],
      "commands": ["editor.action.toggleRenderWhitespace"]
    },
    // File
    {
      "before": ["<leader>", "f", "m"],
      "commands": ["yazi-vscode.toggle"]
    },
    {
      "before": ["<leader>", "f", "M"],
      "commands": ["revealFileInOS"]
    },
    {
      "before": ["<leader>", "f", "r"],
      "commands": ["workbench.action.openRecent"]
    },
    {
      "before": ["<leader>", "f", "l"],
      "commands": ["workbench.action.files.copyPathOfActiveFile"]
    },
    {
      "before": ["<leader>", "f", "n"],
      "commands": ["workbench.action.files.newUntitledFile"]
    },
    // Explorer
    {
      "before": ["<leader>", "e"],
      "commands": [
        // Ô∏èEnsure the Explorer is visible / takes focus
        "workbench.view.explorer",

        // Scroll-to-and-select the file open in the active editor
        "workbench.files.action.showActiveFileInExplorer"
      ]
    },
    // Buffers
    {
      // New tab
      "before": ["<leader>", "b", "n"],
      "commands": ["workbench.action.files.newUntitledFile"]
    },
    {
      // Next tab
      "before": ["]", "b"],
      "commands": ["workbench.action.nextEditor"]
    },
    {
      // Previous tab
      "before": ["[", "b"],
      "commands": ["workbench.action.previousEditor"]
    },
    {
      // Move tab left
      "before": ["<leader>", "b", "h"],
      "commands": ["workbench.action.moveEditorLeftInGroup"]
    },
    {
      // Move tab right
      "before": ["<leader>", "b", "l"],
      "commands": ["workbench.action.moveEditorRightInGroup"]
    },
    {
      // Close current tab
      "before": ["<leader>", "b", "d"],
      "commands": [
        "workbench.action.unpinEditor",
        "workbench.action.closeActiveEditor"
      ]
    },
    {
      // Reopen closed tab
      "before": ["<leader>", "b", "D"],
      "commands": ["workbench.action.reopenClosedEditor"]
    },
    {
      // Close other tabs
      "before": ["<leader>", "b", "o"],
      "commands": [
        "workbench.action.closeAllGroups",
        "workbench.action.reopenClosedEditor",
        "workbench.action.pinEditor"
      ]
    },
    {
      // Goto 'other' tab (switch to the last active tab)
      "before": ["<leader>", "b", "b"],
      "after": ["<C-6>"]
    },
    {
      // TODO: Ideally <leader>bp is a toggle, but non-trivial to get this to work
      "before": ["<leader>", "b", "u"],
      "commands": ["workbench.action.unpinEditor"],
      "when": "activeEditorIsPinned"
    },
    {
      "before": ["<leader>", "b", "p"],
      "commands": ["workbench.action.pinEditor"],
      "when": "!activeEditorIsPinned"
    },
    {
      "before": ["<leader>", "b", "P"],
      "commands": ["workbench.action.closeOtherEditors"]
    },
    // Windows
    {
      // Memonic is 'fullscreen'
      "before": ["<leader>", "w", "F"],
      "commands": ["workbench.action.toggleZenMode"]
    },
    {
      // This actually just toggles fullscreen if you need it
      "before": ["<leader>", "w", "f"],
      "commands": ["workbench.action.toggleFullScreen"]
    },
    {
      // Split the current window vertically
      // This duplicates the current window
      "before": ["<leader>", "w", "v"],
      "commands": [":vsplit"]
    },
    {
      // Split the current window horizontally
      // This duplicates the current window
      "before": ["<leader>", "w", "s"],
      "commands": [":split"]
    },
    {
      // Split the current window in a direction
      "before": ["<leader>", "w", "L"],
      "commands": ["workbench.action.moveEditorToRightGroup"]
    },
    {
      "before": ["<leader>", "w", "H"],
      "commands": ["workbench.action.moveEditorToLeftGroup"]
    },
    {
      "before": ["<leader>", "w", "K"],
      "commands": ["workbench.action.moveEditorToAboveGroup"]
    },
    {
      "before": ["<leader>", "w", "J"],
      "commands": ["workbench.action.moveEditorToBelowGroup"]
    },
    {
      // Focus window
      "before": ["<leader>", "w", "h"],
      "commands": ["workbench.action.focusLeftGroup"]
    },
    {
      "before": ["<leader>", "w", "j"],
      "commands": ["workbench.action.focusBelowGroup"]
    },
    {
      "before": ["<leader>", "w", "k"],
      "commands": ["workbench.action.focusAboveGroup"]
    },
    {
      "before": ["<leader>", "w", "l"],
      "commands": ["workbench.action.focusRightGroup"]
    },
    {
      // Close the current window
      "before": ["<leader>", "w", "d"],
      "commands": ["workbench.action.closeActiveEditor"]
    },
    // Search
    {
      "before": ["<leader>", "<leader>"],
      "commands": ["workbench.action.quickOpen"]
    },
    {
      "before": ["<leader>", "s", "f"],
      "commands": ["fzf-picker.findFiles"]
    },
    // {
    //   // Search file contents using FZF via VS Code task
    //   "before": ["<leader>", "s", "c"],
    //   "commands": [
    //     // "workbench.action.tasks.runTask?fzfSearchContent"
    //     {
    //       "command": "workbench.action.tasks.runTask",
    //       "args": "fzfSearchContent"
    //     }
    //     // "workbench.action.tasks.runTask?fzfSearchContent",
    //     // "workbench.action.terminal.toggleTerminal"
    //   ]
    // },
    {
      // Start a new search within files
      "before": ["<leader>", "s", "s"],
      "commands": [
        // Search within files
        "fzf-picker.findWithinFiles",
        "extension.vim_escape"
      ]
    },
    {
      // Fuzzy search open editors
      "before": ["<leader>", "s", "b"],
      "commands": ["workbench.action.showAllEditorsByMostRecentlyUsed"],
      "when": "editorTextFocus"
    },
    {
      // Search for the current word within files
      "before": ["<leader>", "s", "t"],
      "commands": [
        // Automatically search for the word under the cursor
        "editor.action.addSelectionToNextFindMatch",
        // Search within files
        "fzf-picker.findWithinFiles",
        "extension.vim_escape"
      ]
    },
    {
      "before": ["<leader>", "s", "T"],
      "commands": [
        // Automatically search for the word under the cursor
        "editor.action.addSelectionToNextFindMatch",
        // By default we filter & only search relavant files
        "fzf-picker.findWithinFilesWithType",
        // Escape to Vim normal mode
        "extension.vim_escape"
      ]
    },
    {
      "before": ["<leader>", "s", "r"],
      "commands": ["fzf-picker.resumeSearch"]
    },
    // Jump to tab
    {
      "before": ["<leader>", "1"],
      "commands": ["workbench.action.openEditorAtIndex1"]
    },
    {
      "before": ["<leader>", "2"],
      "commands": ["workbench.action.openEditorAtIndex2"]
    },
    {
      "before": ["<leader>", "3"],
      "commands": ["workbench.action.openEditorAtIndex3"]
    },
    {
      "before": ["<leader>", "4"],
      "commands": ["workbench.action.openEditorAtIndex4"]
    },
    {
      "before": ["<leader>", "5"],
      "commands": ["workbench.action.openEditorAtIndex5"]
    },
    {
      "before": ["<leader>", "6"],
      "commands": ["workbench.action.openEditorAtIndex6"]
    },
    {
      "before": ["<leader>", "7"],
      "commands": ["workbench.action.openEditorAtIndex7"]
    },
    {
      "before": ["<leader>", "8"],
      "commands": ["workbench.action.openEditorAtIndex8"]
    },
    {
      "before": ["<leader>", "9"],
      "commands": ["workbench.action.openEditorAtIndex9"]
    },
    {
      "before": ["<leader>", "0"],
      "commands": ["workbench.action.lastEditorInGroup"]
    },
    // Goto
    {
      "before": ["g", "d"],
      "commands": ["editor.action.revealDefinition"]
    },
    {
      "before": ["g", "y"],
      "commands": ["editor.action.goToTypeDefinition"]
    },
    {
      "before": ["g", "Y"],
      "commands": ["editor.action.peekTypeDefinition"]
    },
    {
      "before": ["g", "p"],
      "commands": ["editor.action.peekDefinition"]
    },
    {
      "before": ["g", "i"],
      "commands": ["editor.action.goToImplementation"]
    },
    {
      "before": ["g", "r"],
      "commands": ["editor.action.goToReferences"]
    },
    {
      "before": ["g", "h"],
      "commands": ["clangd.switchheadersource"]
    },
    {
      "before": ["g", "u"],
      "commands": ["editor.action.referenceSearch.trigger"]
    },
    {
      "before": ["g", "n"],
      "commands": ["editor.action.showDefinitionPreviewHover"]
    },
    {
      "before": ["v", "i", "g"],
      "after": ["g", "g", "V", "G"]
    },
    {
      "before": ["y", "i", "g"],
      "after": [":", "%", "y", "<CR>"]
    },
    {
      "before": ["d", "i", "g"],
      "after": ["g", "g", "V", "G", "d"]
    },
    // Code
    {
      // Rename a variable, method, etc..
      "before": ["<leader>", "c", "r"],
      "commands": ["editor.action.rename"]
    },
    {
      // Pops up parameter hints when you are calling another method
      "before": ["<leader>", "c", "i"],
      "commands": ["editor.action.triggerParameterHints"]
    },
    {
      "before": ["<leader>", "c", "e"],
      "commands": ["editor.action.codeAction"]
    },
    // Errors
    {
      // Global view if problems / errors
      "before": ["<leader>", "e", "e"],
      "commands": ["workbench.actions.view.problems"]
    },
    {
      // Goto next error
      "before": ["<leader>", "e", "n"],
      "commands": ["editor.action.marker.next"]
    },
    {
      // Goto previous error
      "before": ["<leader>", "e", "p"],
      "commands": ["editor.action.marker.prev"]
    },
    // Debug Breakpoints
    {
      // Toggle breakpoint
      "before": ["<leader>", "d", "b"],
      "commands": ["editor.debug.action.toggleBreakpoint"]
    },
    {
      // Disable all breakpoints
      "before": ["<leader>", "d", "B", "a"],
      "commands": ["workbench.debug.viewlet.action.disableAllBreakpoints"]
    },
    {
      // Enable all breakpoints
      "before": ["<leader>", "d", "B", "e"],
      "commands": ["workbench.debug.viewlet.action.enableAllBreakpoints"]
    },
    {
      // Remove all breakpoints
      "before": ["<leader>", "d", "B", "r"],
      "commands": ["workbench.debug.viewlet.action.removeAllBreakpoints"]
    },
    {
      // Conditional Breakpoint
      "before": ["<leader>", "d", "B", "c"],
      "commands": ["editor.debug.action.conditionalBreakpoint"]
    },
    // Debug
    {
      // Continue
      "before": ["<leader>", "d", "c"],
      "commands": ["workbench.action.debug.continue"]
    },
    {
      // Pause
      "before": ["<leader>", "d", "p"],
      "commands": ["workbench.action.debug.pause"]
    },
    {
      // Stop
      "before": ["<leader>", "d", "S"],
      "commands": ["workbench.action.debug.stop"]
    },
    {
      // Restart
      "before": ["<leader>", "d", "R"],
      "commands": ["workbench.action.debug.restart"]
    },
    {
      // Goto
      "before": ["<leader>", "d", "g"],
      "commands": ["workbench.action.debug.setNextStatement"]
    },
    {
      // Toggle log point
      "before": ["<leader>", "d", "L"],
      "commands": ["editor.debug.action.toggleLogPoint"]
    },
    // Hover
    {
      // Show the hover - or the debug hover
      // TODO: Make sure the debug hover is working here
      "before": ["<leader>", "Backspace"],
      "commands": [
        "editor.action.showHover",
        "editor.debug.action.showDebugHover"
      ]
    },
    // ‚îÄ‚îÄ Watches & evaluation ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    {
      // Add‚ÄØselection ‚Üí¬†Watch
      "before": ["<leader>", "d", "w"],
      "commands": ["editor.debug.action.selectionToWatch"]
    },
    {
      // Evaluate‚ÄØselection in REPL
      "before": ["<leader>", "d", "x"],
      "commands": ["editor.debug.action.selectionToRepl"]
    },
    // Traversal - movement of windows or debug
    // Does not cause large state changes so mis-typing is not a big issue
    {
      // Step Over (next)
      "before": ["<leader>", "t", "n"],
      "commands": ["workbench.action.debug.stepOver"]
    },
    {
      // Step Into
      "before": ["<leader>", "t", "i"],
      "commands": ["workbench.action.debug.stepInto"]
    },
    {
      // Step Into Target (choose what to step into)
      "before": ["<leader>", "t", "I"],
      "commands": ["workbench.action.debug.stepIntoTarget"]
    },
    {
      // Step Out
      "before": ["<leader>", "t", "o"],
      "commands": ["workbench.action.debug.stepOut"]
    },
    {
      "before": ["<leader>", "t", "l"], // Variables¬†view (locals)
      "commands": ["workbench.debug.action.focusVariablesView"]
    },
    {
      "before": ["<leader>", "t", "w"],
      "commands": ["workbench.debug.action.focusWatchView"]
    },
    {
      "before": ["<leader>", "t", "r"], // Focus Debug¬†Console
      "commands": ["workbench.debug.action.focusRepl"]
    },
    {
      "before": ["<leader>", "t", "b"],
      "commands": ["workbench.debug.action.focusBreakpointsView"]
    },
    {
      "before": ["<leader>", "t", "c"], // Call‚ÄëStack view (k = ‚Äústack‚Äù mnemonic)
      "commands": ["workbench.debug.action.focusCallStackView"]
    },
    {
      "before": ["<leader>", "t", "u"], // Up the call stack
      "commands": ["workbench.action.debug.callStackUp"]
    },
    {
      "before": ["<leader>", "t", "d"], // Down the call stack
      "commands": ["workbench.action.debug.callStackDown"]
    },
    {
      "before": ["<leader>", "t", "U"], // Top of the call stack
      "commands": ["workbench.action.debug.callStackTop"]
    },
    {
      "before": ["<leader>", "t", "D"], // Bottom of the call stack
      "commands": ["workbench.action.debug.callStackBottom"]
    },
    // Git
    {
      // Open LazyGit
      "before": ["<leader>", "g", "g"],
      "commands": [
        "workbench.action.terminal.new",
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": { "text": "lazygit\u000D" }
        },
        "workbench.action.terminal.moveToEditor",
        // Need to call this twice for some reason to have it hide
        "workbench.action.terminal.toggleTerminal",
        "workbench.action.terminal.toggleTerminal"
      ]
    },
    {
      // Git log - shows the Git log of the current file
      "before": ["<leader>", "g", "l"],
      "commands": [
        "workbench.action.terminal.new",
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "git log -p --diff-algorithm=histogram --date=short \"${file}\"\u000D"
          }
        },
        "workbench.action.terminal.moveToEditor",
        // Need to call this twice for some reason to have it hide
        "workbench.action.terminal.toggleTerminal",
        "workbench.action.terminal.toggleTerminal"
      ]
    },
    {
      // Open VSCode version of Git viewer
      "before": ["<leader>", "g", "G"],
      "commands": [
        "workbench.view.scm",
        "scm.focusInput",
        "vim.enterInsertMode"
      ]
    },
    {
      // Open a diff for the changes to the current file
      "before": ["<leader>", "g", "d"],
      "commands": ["git.openChange"]
    },
    // {
    //   // Stage the current file you have open
    //   "before": ["<leader>", "g", "s"],
    //   "commands": ["git.stage"]
    // },
    // {
    //   // Unstage the current file you have open
    //   "before": ["<leader>", "g", "u"],
    //   "commands": ["git.unstage"]
    // },
    {
      // Worktree - when you are in a diff go back to the actual file
      "before": ["<leader>", "g", "w"],
      "commands": ["git.openFile"]
    },
    {
      // Git lens history of the of the last commit touching the current line / file
      "before": ["<leader>", "g", "h"],
      "commands": ["gitlens.showQuickCommitFileDetails"]
    },
    {
      // Git lens version of log of current file
      "before": ["<leader>", "g", "L"],
      "commands": ["files.openTimeline"]
    },
    // Merge
    {
      // Accept Ours
      "before": ["<leader>", "c", "o"],
      "commands": ["merge.toggleActiveConflictInput1"]
    },
    {
      // Accept All of Ours
      "before": ["<leader>", "c", "O"],
      "commands": ["merge.acceptAllInput1"]
    },
    {
      // Accept Theirs
      "before": ["<leader>", "c", "t"],
      "commands": ["merge.toggleActiveConflictInput2"]
    },
    {
      // Accept All of Theirs
      "before": ["<leader>", "c", "T"],
      "commands": ["merge.acceptAllInput2"]
    },
    {
      // Accept Both
      "before": ["<leader>", "c", "b"],
      "commands": ["merge-conflict.accept.both"]
    },
    {
      // Toggle cursor between two sides
      "before": ["<leader>", "c", "c"],
      "commands": ["mergeEditor.toggleBetweenInputs"]
    },
    {
      // Quit & accept the merge
      "before": ["<leader>", "c", "q"],
      "commands": ["mergeEditor.acceptMerge"]
    },
    {
      // Goto next conflict or change
      "before": ["<leader>", "c", "n"],
      "commands": [
        "workbench.action.compareEditor.nextChange",
        "merge.goToNextUnhandledConflict"
      ]
    },
    {
      // Goto previous conflict or change
      "before": ["<leader>", "c", "p"],
      "commands": [
        "workbench.action.compareEditor.previousChange",
        "merge.goToPreviousUnhandledConflict"
      ]
    },
    {
      // Goto next conflict
      "before": ["]", "x"],
      "commands": ["merge.goToNextUnhandledConflict"]
    },
    {
      // Goto previous conflict
      "before": ["[", "x"],
      "commands": ["merge.goToPreviousUnhandledConflict"]
    },
    {
      // Goto next conflict
      "before": ["]", "c"],
      "commands": ["workbench.action.compareEditor.nextChange"]
    },
    {
      // Goto previous conflict
      "before": ["[", "c"],
      "commands": ["workbench.action.compareEditor.previousChange"]
    },
    {
      // Change the current side of the diff
      "before": ["<leader>", "c", "s"],
      "commands": ["diffEditor.switchSide"]
    },
    {
      // Revert the current change
      "before": ["<leader>", "c", "v"],
      "commands": ["git.revertSelectedRanges"]
    },
    // Testing
    {
      "before": ["<leader>", "T", "r"],
      "commands": ["testing.runCurrentTest"]
    },
    {
      "before": ["<leader>", "T", "d"],
      "commands": ["testing.debugCurrentTest"]
    },
    {
      "before": ["<leader>", "T", "a"],
      "commands": ["testing.runAll"]
    },
    {
      "before": ["<leader>", "T", "R"],
      "commands": ["testing.reRunLastRun"]
    },
    {
      "before": ["<leader>", "T", "o"],
      "commands": ["testing.showMostRecentOutput"]
    },
    {
      "before": ["<leader>", "T", "f"],
      "commands": ["testing.runCurrentFile"]
    },
    {
      "before": ["<leader>", "T", "e"],
      "commands": ["testing.openTestView"] // focuses the Test Explorer
    },
    // Make (Build)
    {
      "before": ["<leader>", "m", "T"],
      "commands": ["workbench.action.tasks.runTask"]
    },
    {
      "before": ["<leader>", "m", "t"],
      "commands": ["workbench.action.tasks.reRunTask"]
    },
    {
      "before": ["<leader>", "m", "b"],
      "commands": ["workbench.action.tasks.build"]
    },
    {
      "before": ["<leader>", "m", "B"],
      "commands": ["workbench.action.tasks.configureDefaultBuildTask"]
    },
    {
      "before": ["<leader>", "m", "c"],
      "commands": ["workbench.action.tasks.terminate"]
    },
    {
      "before": ["<leader>", "m", "r"],
      "commands": ["workbench.action.debug.start"]
    },
    {
      "before": ["<leader>", "m", "R"],
      "commands": ["workbench.action.debug.selectandstart"]
    },
    {
      "before": ["<leader>", "m", "s"],
      "commands": ["workbench.action.debug.stop"]
    },
    {
      "before": ["Z", "Z"],
      "commands": [
        "workbench.action.unpinEditor",
        "workbench.action.files.save",
        "workbench.action.closeActiveEditor"
      ]
    },
    {
      "before": ["Z", "Q"],
      "commands": [
        "workbench.action.unpinEditor",
        "workbench.action.revertAndCloseActiveEditor"
      ]
    }
  ],
  "vim.insertModeKeyBindings": [
    // Manually create undo stack
    { "before": ["<Esc>"], "after": ["<Esc>", "<C-g>u"] }
  ],
  "vim.visualModeKeyBindings": [
    {
      "before": ["<tab>"],
      "commands": ["editor.action.indentLines"]
    },
    {
      "before": ["<S-tab>"],
      "commands": ["editor.action.outdentLines"]
    },
    {
      "before": ["<"],
      "commands": ["editor.action.outdentLines"]
    },
    {
      "before": [">"],
      "commands": ["editor.action.indentLines"]
    },
    {
      "before": ["J"],
      "commands": ["editor.action.moveLinesDownAction"]
    },
    {
      "before": ["K"],
      "commands": ["editor.action.moveLinesUpAction"]
    }
  ],
  // To improve performance
  "extensions.experimental.affinity": {
    "vscodevim.vim": 1
  },
  // Disable links as there is an underline effect that is not great
  // Goto definition works regardless so not needed
  "editor.links": false,
  // Theme
  "workbench.colorTheme": "Visual Studio Dark - C++",
  "window.titleBarStyle": "custom",
  "editor.minimap.enabled": false,
  "editor.fontSize": 16,
  "terminal.integrated.fontSize": 16,
  "terminal.integrated.enableVisualBell": false,
  "accessibility.signals.terminalBell": {
    "sound": "off"
  },
  "terminal.integrated.confirmOnKill": "never",
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[cpp]": {
    "editor.defaultFormatter": "llvm-vs-code-extensions.vscode-clangd",
    "editor.formatOnSave": true
  },
  "[c]": {
    "editor.defaultFormatter": "llvm-vs-code-extensions.vscode-clangd",
    "editor.formatOnSave": true
  },
  "clangd.arguments": [
    "--background-index",
    "--clang-tidy",
    "--completion-style=detailed",
    "--header-insertion=never",
    "--pch-storage=memory",
    "-j=8"
  ],
  "files.watcherExclude": {
    "**/.git/**": true,
    "**/.cache/**": true,
    "**/build/**": true,
    "**/out/**": true,
    "**/bazel-*/**": true
  },
  "search.exclude": {
    "**/.*": true,
    "**/node_modules/**": true,
    "**/build/**": true,
    "**/out/**": true,
    "**/bazel-*/**": true
  },
  // Japanese text won't be flagged as ‚Äúsuspicious‚Äù
  "editor.unicodeHighlight.allowedLocales": { "ja": true },
  // Fuzzy Finder
  "search.useGlobalIgnoreFiles": true,
  "search.useParentIgnoreFiles": true,
  "fzf-picker.general.useGitIgnoreExcludes": true,
  "terminal.integrated.env.linux": {
    "FZF_DEFAULT_OPTS": "--bind 'esc:clear-query' --reverse --ansi --ellipsis= --style=minimal --tiebreak=pathname --info inline --no-cycle --color='prompt:#80a0ff,pointer:#ff5000,marker:#afff5f'"
  },
  "terminal.integrated.env.osx": {
    "FZF_DEFAULT_OPTS": "--bind 'esc:clear-query' --reverse --ansi --ellipsis= --style=minimal --tiebreak=pathname --info inline --no-cycle --color='prompt:#80a0ff,pointer:#ff5000,marker:#afff5f'"
  },
  "terminal.integrated.env.windows": {
    "FZF_DEFAULT_OPTS": "--bind 'esc:clear-query' --reverse --ansi --ellipsis= --style=minimal --tiebreak=pathname --info inline --no-cycle --color='prompt:#80a0ff,pointer:#ff5000,marker:#afff5f'"
  },
  // Minimalism
  "editor.guides.indentation": false,
  "editor.hideCursorInOverviewRuler": true, // Hide cursor in scrollbar for a cleaner look
  "editor.overviewRulerBorder": false, // No border on scrollbar
  "editor.folding": false, // Disable code folding (Neovim has it, but it's optional; disable for minimalism)
  "zenMode.restore": false,
  // Minimal Terminal
  "terminal.integrated.tabs.enabled": false, // Hide terminal tabs for minimalism
  "vim.autoindent": true, // Auto-indent like Neovim
  // Zen Mode
  "zenMode.centerLayout": true,
  "zenMode.showTabs": "none",
  "zenMode.fullScreen": true,
  "zenMode.hideStatusBar": true,
  "zenMode.hideActivityBar": true,
  // "zenMode.hideLineNumbers": false,
  "window.commandCenter": false,
  "workbench.layoutControl.enabled": false,
  "workbench.activityBar.location": "hidden",
  "C_Cpp.intelliSenseEngine": "disabled",
  "github.copilot.enable": {
    "*": false,
    "plaintext": false,
    "markdown": false,
    "scminput": false
  },
  "breadcrumbs.enabled": false,
  "gitlens.ai.model": "vscode",
  "gitlens.ai.vscode.model": "copilot:gpt-4.1",
  "gitlens.graph.minimap.enabled": false,
  "git.mergeEditor": true,
  "workbench.iconTheme": "material-icon-theme",
  "workbench.editor.empty.hint": "hidden",
  "fzf-picker.findWithinFiles.previewCommand": "bat --color=always --style=numbers --highlight-line {2} {1}",
  "fzf-picker.findWithinFiles.previewWindowConfig": "bottom,30%,+{2}/2",
  "fzf-picker.findFiles.previewWindowConfig": "right,55%",
  "git.blame.editorDecoration.enabled": false,
  "github.copilot.nextEditSuggestions.enabled": true,
  "debug.inlineValues": "on",
  "remote.SSH.defaultExtensions": [
    "vscodevim.vim",
    "jellydn.fzf-picker",
    "jeff-hykin.better-cpp-syntax",
    "ms-vscode.cpptools-themes",
    "esbenp.prettier-vscode",
    "llvm-vs-code-extensions.vscode-clangd",
    "dautroc.yazi-vscode",
    "chaitanyashahare.lazygit"
  ],
  "gitlens.currentLine.enabled": false,
  "gitlens.codeLens.enabled": false,
  "editor.inlayHints.enabled": "on",
  "debug.onTaskErrors": "showErrors",
  "task.saveBeforeRun": "always"
}
