{
  // Cursor navigation settings
  "editor.cursorSurroundingLines": 8,
  "editor.cursorSurroundingLinesStyle": "all",
  "editor.scrollBeyondLastLine": false,
  "editor.stickyScroll.enabled": false,
  // Copilot Chat configuration
  "github.copilot.chat.agent.thinkingTool": true,
  "chat.agent.enabled": true,
  "github.copilot.chat.codesearch.enabled": true,
  "chat.agent.maxRequests": 10000,
  "chat.editing.confirmEditRequestRemoval": false,
  "chat.editing.confirmEditRequestRetry": false,
  // Always open files from untrusted workspaces
  "security.workspace.trust.untrustedFiles": "open",
  // Increase terminal scrollback similar to using a terminal split in Neovim
  "terminal.integrated.scrollback": 10000,
  "editor.fontFamily": "FiraCode Nerd Font, Fira Code, monospace",
  "editor.fontLigatures": true,
  "terminal.integrated.fontFamily": "FiraCode Nerd Font, Fira Code, monospace",
  "terminal.integrated.defaultProfile.linux": "zsh",
  "terminal.integrated.defaultProfile.osx": "zsh",
  "terminal.integrated.defaultProfile.windows": "pwsh",
  "editor.formatOnSave": true,
  "window.zoomLevel": 0.2,
  // Cursor Shape & Style
  "editor.cursorStyle": "block-outline",
  "editor.cursorWidth": 3, // only applies when cursorStyle is "line"
  "editor.semanticHighlighting.enabled": true,
  "editor.selectionHighlight": false,
  "editor.occurrencesHighlight": "off",
  "workbench.colorCustomizations": {
    // Custom cursor color - do not change
    "editorCursor.foreground": "#FF5000",
    "editorCursor.background": "#000000",
    // "statusBar.background": "#1E1E1E"

    // Simple Black Background
    "statusBar.background": "#000000",
    "editor.background": "#000000",
    "tab.activeBackground": "#191919",
    "tab.inactiveBackground": "#000000",
    "editorGroupHeader.tabsBackground": "#000000"

    // ---- START PURE BLACK BACKGROUND ----
    // // Editor line highlight/gutter (for subtlety, optional)
    // "editor.lineHighlightBackground": "#202020",
    // "editorWhitespace.foreground": "#222222",
    // "editor.selectionBackground": "#656A48",
    // "editor.inactiveSelectionBackground": "#505050",
    // "editor.selectionHighlightBackground": "#505050",
    // "editorBracketMatch.background": "#505050",
    // "editorBracketMatch.border": "#505050",
    // "editor.wordHighlightBackground": "#505050",
    // "editorLineNumber.foreground": "#222222",
    // "editorLineNumber.activeForeground": "#666666",
    // "editorIndentGuide.background1": "#515C6A",
    // "editorIndentGuide.activeBackground1": "#515C6A"
    // // Black background
    // "editor.background": "#000000",
    // "editor.foreground": "#D4D4D4",
    // "editorGutter.background": "#000000",
    // "sideBar.background": "#000000",
    // "activityBar.background": "#000000",
    // "statusBar.background": "#000000",
    // "titleBar.activeBackground": "#000000",
    // "titleBar.inactiveBackground": "#000000",
    // "editorGroupHeader.tabsBackground": "#000000",
    // "tab.activeBackground": "#000000",
    // "tab.inactiveBackground": "#000000",
    // "panel.background": "#000000",
    // "quickInput.background": "#000000",
    // "breadcrumb.background": "#000000",
    // "breadcrumbPicker.background": "#000000",
    // "sideBar.border": "#000000",
    // "activityBar.border": "#000000",
    // "panel.border": "#000000",
    // "statusBar.border": "#000000",
    // "editorGroup.border": "#000000",
    // "editorGroupHeader.tabsBorder": "#000000",
    // "tab.border": "#000000",
    // "sideBySideEditor.verticalBorder": "#000000",
    // "sideBySideEditor.horizontalBorder": "#000000",
    // "editorGroup.emptyBackground": "#000000",
    // "editorGroupHeader.noTabsBackground": "#000000",
    // "editorPane.background": "#000000",
    // "panelSection.background": "#000000",
    // // Scroll bars
    // "scrollbarSlider.background": "#00000080",

    // // Minimap
    // "minimap.background": "#000000",
    // "minimap.selectionHighlight": "#222222",
    // "minimap.errorHighlight": "#000000",
    // "minimap.warningHighlight": "#000000",
    // "minimap.findMatchHighlight": "#222222",

    // // Search/Find Widget
    // "editorWidget.background": "#000000",
    // "peekViewEditor.background": "#000000",
    // "peekViewResult.background": "#000000",
    // "peekViewTitle.background": "#000000",

    // // Popups & notifications
    // "widget.shadow": "#00000000",
    // "notification.background": "#000000",
    // "notification.toast.background": "#000000",
    // "notifications.background": "#000000",
    // "notifications.border": "#000000",

    // // Dropdowns, pickers
    // "dropdown.background": "#000000",
    // "dropdown.border": "#000000",
    // "input.background": "#000000",
    // "input.border": "#000000",

    // // Context/right-click menus
    // "menu.background": "#000000",
    // "menu.selectionBackground": "#222222",

    // // Terminal
    // "terminal.background": "#000000"
    // ---- END PURE BLACK BACKGROUND ----
  },
  // Custom color scheme
  "editor.tokenColorCustomizations": {
    "textMateRules": [
      { "scope": "source", "settings": { "foreground": "#D4D4D4" } },
      { "scope": "keyword", "settings": { "foreground": "#86C9EF" } },
      {
        "scope": "entity.name.function.preprocessor",
        "settings": { "foreground": "#C255C5" }
      },
      {
        "scope": "string.quoted",
        "settings": { "foreground": "#DFA67C" }
      },
      {
        "scope": "keyword.control",
        "settings": { "foreground": "#ECBC6F" }
      },
      {
        "scope": "keyword.operator",
        "settings": { "foreground": "#DFDFBE" }
      },
      {
        "scope": ["constant.numeric", "keyword.other.unit.suffix"],
        "settings": { "foreground": "#5796BE" }
      },
      { "scope": "string", "settings": { "foreground": "#8FAFDF" } },
      {
        "scope": "constant.character.escape",
        "settings": { "foreground": "#D7BA7D" }
      },
      { "scope": "punctuation", "settings": { "foreground": "#DFDDB9" } },
      {
        "scope": ["comment", "punctuation.definition.comment"],
        "settings": { "foreground": "#7A987A" }
      },
      {
        "scope": "punctuation.section.arguments",
        "settings": { "foreground": "#F89500" }
      },
      {
        "scope": "punctuation.definition.tag",
        "settings": { "foreground": "#808080" }
      },
      { "scope": "entity.name.type", "settings": { "foreground": "#4EC9B0" } },
      {
        "scope": "entity.name.type.interface",
        "settings": { "foreground": "#B8D7A3" }
      },
      {
        "scope": "variable.other.enummember",
        "settings": { "foreground": "#4FC1FF" }
      },
      // Functions
      {
        "scope": "entity.name.function",
        "settings": { "foreground": "#DCDCAA" }
      },
      // Namespace
      {
        "scope": "meta.head.namespace",
        "settings": { "foreground": "#7BCFE6" }
      },
      // Built in types
      {
        "scope": [
          "storage.type",
          "storage.type.built-in",
          "keyword.type",
          "support.type"
        ],
        "settings": { "foreground": "#ECB763" }
      },
      // Casts
      {
        "scope": "keyword.operator.cast",
        "settings": { "foreground": "#ECB763" }
      },
      // Local variable
      {
        "scope": "variable",
        "settings": { "foreground": "#9CDCFE" }
      },
      // Class member variable
      {
        "scope": "variable.other.object",
        "settings": { "foreground": "#DD9DC2" }
      },
      {
        "scope": "markup.underline.link",
        "settings": { "foreground": "#8FAFDF" }
      }
    ]
  },
  // "editor.semanticTokenColorCustomizations": {
  //   "enabled": true,
  //   "rules": {
  //     // "variable.local": "#EFC986",
  //     "variable.readonly": "#D4D4D4",
  //     "parameter": "#D4D4D4",
  //     "property": "#D4D4D4",
  //     "enumMember": "#4FC1FF",
  //     "function": "#9CDCFE",
  //     "method": "#9CDCFE",
  //     "class": "#4EC9B0",
  //     "struct": "#4EC9B0",
  //     "interface": "#B8D7A3",
  //     "typeParameter": "#4EC9B0",
  //     "type": "#4EC9B0",
  //     "number": "#BE966E",
  //     "string": "#8FAFDF",
  //     "comment": "#7A987A",
  //     "keyword": "#86C9EF",
  //     "operator": "#666666",
  //     "namespace": "#4EC9B0"
  //     // "type.defaultLibrary": "#00FFCC bold" // built-in types like float
  //     // "type": "#00FFCC italic" // fallback for other types
  //   }
  // },
  // Cursor
  "editor.cursorBlinking": "solid", // options: "blink", "smooth", "phase", "expand", "solid"
  "editor.cursorSmoothCaretAnimation": "off", // only with "smooth" blinking
  // Editor UI to match Vim configuration
  "editor.lineNumbers": "relative",
  "editor.renderLineHighlight": "none",
  // Use system clipboard in Vim extension
  "vim.useSystemClipboard": true,
  // Control select keys in Vim
  "vim.useCtrlKeys": true,
  "vim.handleKeys": {
    "<tab>": false,
    "<S-tab>": false,
    "<C-o>": true,
    "<C-i>": true,
    "J": false,
    "H": false,
    "K": false,
    "L": false
  },
  // Search behaviour like Vim
  "vim.ignorecase": true,
  "vim.smartcase": true,
  "vim.incsearch": true,
  "vim.hlsearch": true,
  "vim.startofline": false,
  // Highlighted Yank
  "vim.highlightedyank.enable": true,
  "vim.highlightedyank.duration": 125,
  // Easy Motion
  "vim.easymotion": true,
  // Surround
  "vim.surround": true,
  // Camel Case Motion - disabed for now as conflicts with other bindings
  // "vim.camelCaseMotion.enable": true,
  // Optimized for Colemak-Mod-DH
  "vim.easymotionKeys": "tsraneiodhgmplfuc,bjvk",
  // Leader key and custom key mappings
  "vim.leader": "<space>",
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": ["<leader>", "v"],
      "after": ["<C-v>"]
    },
    {
      "before": ["<tab>"],
      "commands": ["editor.action.indentLines"]
    },
    {
      "before": ["<S-tab>"],
      "commands": ["editor.action.outdentLines"]
    },
    {
      "before": ["<C-u>"],
      "after": ["16k"]
    },
    {
      "before": ["<C-d>"],
      "after": ["16j"]
    },
    {
      "before": ["<D-Left>"],
      "commands": ["workbench.action.navigateBack"]
    },
    {
      "before": ["<D-Right>"],
      "commands": ["workbench.action.navigateForward"]
    },
    { "before": ["<C-o>"], "commands": ["workbench.action.navigateBack"] },
    { "before": ["<C-i>"], "commands": ["workbench.action.navigateForward"] },
    { "before": ["<C-h>"], "commands": ["workbench.action.focusLeftGroup"] },
    { "before": ["<C-j>"], "commands": ["workbench.action.focusBelowGroup"] },
    { "before": ["<C-k>"], "commands": ["workbench.action.focusAboveGroup"] },
    {
      "before": ["<Esc>"],
      "after": ["<Esc>"],
      "commands": [":nohl"]
    },
    {
      // Use Visual Studio code undo rather than VSVim
      "before": ["u"],
      "commands": [{ "command": "undo" }]
    },
    {
      // Use Visual Studio code redo rather than VSVim
      "before": ["<C-r>"],
      "commands": [{ "command": "redo" }]
    },
    { "before": ["<C-l>"], "commands": ["workbench.action.focusRightGroup"] },
    // Fuzzy Find
    {
      "before": ["<leader>", "<leader>"],
      "commands": ["workbench.action.quickOpen"]
    },
    // File
    {
      "before": ["<leader>", "f", "m"],
      "commands": ["workbench.files.action.focusFilesExplorer"]
    },
    // Explorer
    {
      "before": ["<leader>", "e"],
      "commands": ["workbench.view.explorer"]
    },
    // Buffers
    {
      "before": ["]", "b"],
      "commands": ["workbench.action.nextEditor"]
    },
    {
      "before": ["[", "b"],
      "commands": ["workbench.action.previousEditor"]
    },
    {
      "before": ["<leader>", "b", "d"],
      "commands": ["workbench.action.closeActiveEditor"]
    },
    {
      "before": ["<leader>", "b", "o"],
      "commands": ["workbench.action.closeOtherEditors"]
    },
    {
      "before": ["<leader>", "b", "b"],
      "after": ["<C-6>"]
    },
    {
      // TODO: Ideally <leader>bp is a toggle, but non trival to get this to work
      "before": ["<leader>", "b", "u"],
      "commands": ["workbench.action.unpinEditor"],
      "when": "activeEditorIsPinned"
    },
    {
      "before": ["<leader>", "b", "p"],
      "commands": ["workbench.action.pinEditor"],
      "when": "!activeEditorIsPinned"
    },
    {
      "before": ["<leader>", "b", "P"],
      "commands": ["workbench.action.closeOtherEditors"]
    },
    {
      "before": ["<S-h>"],
      "commands": [":bprevious"]
    },
    {
      "before": ["<S-l>"],
      "commands": [":bnext"]
    },
    // Windows
    {
      // Memonic is 'fullscreen'
      "before": ["<leader>", "w", "f"],
      "commands": ["workbench.action.toggleZenMode"]
    },
    {
      // This actually just toggles fullscreen if you need it
      "before": ["<leader>", "w", "F"],
      "commands": ["workbench.action.toggleFullScreen"]
    },
    {
      "before": ["leader", "w", "v"],
      "commands": [":vsplit"]
    },
    {
      "before": ["leader", "w", "s"],
      "commands": [":split"]
    },
    {
      "before": ["leader", "w", "d"],
      "commands": ["workbench.action.closeActiveEditor"]
    },
    {
      "before": ["leader", "w", "h"],
      "commands": ["workbench.action.focusLeftGroup"]
    },
    {
      "before": ["leader", "w", "j"],
      "commands": ["workbench.action.focusBelowGroup"]
    },
    {
      "before": ["leader", "w", "k"],
      "commands": ["workbench.action.focusAboveGroup"]
    },
    {
      "before": ["leader", "w", "l"],
      "commands": ["workbench.action.focusRightGroup"]
    },
    // Search
    {
      "before": ["<leader>", "s", "g"],
      "commands": ["find-it-faster.findWithinFiles"]
    },
    {
      "before": ["<leader>", "s", "f"],
      "commands": ["find-it-faster.findFiles"]
    },
    {
      "before": ["<leader>", "s", "t"],
      "commands": ["find-it-faster.findWithinFilesWithTypeFilter"]
    },
    {
      "before": ["<leader>", "s", "r"],
      "commands": ["find-it-faster.resumeSearch"]
    },
    // Easy Motion
    {
      "before": ["s"],
      "after": ["<leader>", "<leader>", "2", "s"]
    },
    {
      "before": ["S"],
      "after": ["<leader>", "<leader>", "2", "S"]
    },
    // Goto
    {
      "before": ["g", "d"],
      "commands": ["editor.action.revealDefinition"]
    },
    {
      "before": ["g", "p"],
      "commands": ["editor.action.peekDefinition"]
    },
    {
      "before": ["g", "i"],
      "commands": ["editor.action.goToImplementation"]
    },
    {
      "before": ["g", "r"],
      "commands": ["editor.action.goToReferences"]
    },
    {
      "before": ["g", "h"],
      "commands": ["clangd.switchSourceHeader"]
    },
    {
      "before": ["g", "u"],
      "commands": ["editor.action.referenceSearch.trigger"]
    },
    {
      "before": ["g", "n"],
      "commands": ["editor.action.showDefinitionPreviewHover"]
    },
    {
      "before": ["v", "i", "g"],
      "after": ["g", "g", "V", "G"]
    },
    {
      "before": ["y", "i", "g"],
      "after": ["g", "g", "V", "G", "y"]
    },
    {
      "before": ["d", "i", "g"],
      "after": ["g", "g", "V", "G", "d"]
    },
    // Code
    {
      // Rename a variable, method, etc..
      "before": ["<leader>", "c", "r"],
      "commands": ["editor.action.rename"]
    },
    {
      // Pops up parameter hints when you are calling another method
      "before": ["<leader>", "c", "i"],
      "commands": ["editor.action.triggerParameterHints"]
    },
    {
      "before": ["<leader>", "c", "e"],
      "commands": ["editor.action.quickFix"]
    },
    // Errors
    {
      // Global view if problems / errors
      "before": ["<leader>", "e", "e"],
      "commands": ["workbench.actions.view.problems"]
    },
    {
      // Goto next error
      "before": ["<leader>", "e", "n"],
      "commands": ["editor.action.marker.next"]
    },
    {
      // Goto previous error
      "before": ["<leader>", "e", "p"],
      "commands": ["editor.action.marker.prev"]
    },
    // Debug
    {
      "before": ["<leader>", "d", "b"],
      "commands": ["editor.debug.action.toggleBreakpoint"]
    },
    {
      "before": ["<leader>", "d", "d"],
      "commands": ["workbench.debug.viewlet.action.disableAllBreakpoints"]
    },
    {
      "before": ["<leader>", "d", "e"],
      "commands": ["workbench.debug.viewlet.action.enableAllBreakpoints"]
    },
    {
      "before": ["<leader>", "d", "r"],
      "commands": ["workbench.debug.viewlet.action.removeAllBreakpoints"]
    },
    {
      "before": ["<leader>", "d", "a"],
      "commands": ["workbench.debug.viewlet.action.focusBreakpointsView"]
    },
    {
      "before": ["<leader>", "d", "c"],
      "commands": ["workbench.action.debug.continue"]
    },
    // Git
    { "before": ["<leader>", "g", "d"], "commands": ["git.openChange"] }, // [EDIT][SCM]
    // ── 1. Stage / Unstage ────────────────────────────────────────────────────
    // (s)tage - adds the whole file OR just the highlighted hunks to the index.
    // Works from editor, diff view, or the SCM list.
    { "before": ["<leader>", "g", "s"], "commands": ["git.stage"] }, // [SCM][DIFF][EDIT]

    // (u)nstage – the inverse of stage. Same context rules.
    { "before": ["<leader>", "g", "u"], "commands": ["git.unstage"] }, // [SCM][DIFF][EDIT]

    // ── 2. Jump between working tree & diff ──────────────────────────────────
    // (d)iff – open or toggle the Git diff against HEAD for the current file.
    // { "before": ["<leader>", "g", "d"], "commands": ["git.openChange"] }, // [DIFF][EDIT]

    // (w)orktree – when you’re *in* that diff, switch back to the live file.
    { "before": ["<leader>", "g", "w"], "commands": ["git.openFile"] }, // [DIFF]

    // ── 3. Throw-away changes ───────────────────────────────────────────────
    // (r)evert – inside a diff, discard ONLY the selected lines/hunks.
    {
      "before": ["<leader>", "g", "r"],
      "commands": ["git.revertSelectedRanges"]
    }, // [DIFF]

    // (c)lean – run `git clean -xdf` after a safety prompt to wipe ALL
    // untracked files. Irreversible, so keep the mnemonic sharp!
    // { "before": ["<leader>", "g", "C"], "commands": ["git.clean"] }, // [ANY]

    // ── 4. Inspect history ───────────────────────────────────────────────────
    // (h)istory popup – GitLens quick view of the last commit touching
    // the current line/file.
    {
      "before": ["<leader>", "g", "h"],
      "commands": ["gitlens.showQuickCommitFileDetails"]
    }, // [EDIT]

    // (l)og timeline – opens the Timeline side-pane with full commit history,
    // file-saves, and extension events.
    { "before": ["<leader>", "g", "l"], "commands": ["files.openTimeline"] }, // [EDIT]

    // ── 5. File maintenance ─────────────────────────────────────────────────
    // re(n)ame – triggers the Explorer rename (same as F2) or, if focus is on
    // the editor tab header, renames the file on disk and updates the buffer.
    { "before": ["<leader>", "g", "n"], "commands": ["renameFile"] }, // [EXPL][EDIT]
    // Testing
    {
      "before": ["<leader>", "t", "r"],
      "commands": ["testing.runCurrentTest"]
    },
    {
      "before": ["<leader>", "t", "d"],
      "commands": ["testing.debugCurrentTest"]
    },
    {
      "before": ["<leader>", "t", "a"],
      "commands": ["testing.runAll"]
    },
    {
      "before": ["<leader>", "t", "R"],
      "commands": ["testing.reRunLastRun"]
    },
    {
      "before": ["<leader>", "t", "o"],
      "commands": ["testing.showMostRecentOutput"]
    },
    {
      "before": ["<leader>", "t", "f"],
      "commands": ["testing.runCurrentFile"]
    },
    {
      "before": ["<leader>", "t", "e"],
      "commands": ["testing.openTestView"] // focuses the Test Explorer
    },
    // Make (Build)
    {
      "before": ["<leader>", "m", "b"],
      "commands": ["workbench.action.tasks.build"]
    },
    {
      "before": ["<leader>", "m", "c"],
      "commands": ["workbench.action.tasks.terminate"]
    },
    {
      "before": ["<leader>", "m", "r"],
      "commands": ["workbench.action.debug.start"]
    },
    {
      "before": ["<leader>", "m", "s"],
      "commands": ["workbench.action.debug.stop"]
    }
    // Debug Navigation removed; handled via keybindings.json
  ],
  "vim.insertModeKeyBindings": [
    // Manually create undo stack
    { "before": ["<Esc>"], "after": ["<Esc>", "<C-g>u"] }
  ],
  "vim.visualModeKeyBindings": [
    {
      "before": ["<tab>"],
      "commands": ["editor.action.indentLines"]
    },
    {
      "before": ["<S-tab>"],
      "commands": ["editor.action.outdentLines"]
    },
    {
      "before": ["<"],
      "commands": ["editor.action.outdentLines"]
    },
    {
      "before": [">"],
      "commands": ["editor.action.indentLines"]
    },
    {
      "before": ["H"],
      "commands": ["editor.action.moveLinesDownAction"]
    },
    {
      "before": ["L"],
      "commands": ["editor.action.moveLinesUpAction"]
    }
  ],
  // To improve performance
  "extensions.experimental.affinity": {
    "vscodevim.vim": 1
  },
  "workbench.colorTheme": "Visual Studio Dark - C++",
  "window.titleBarStyle": "custom",

  "editor.minimap.enabled": false,
  "editor.fontSize": 16,
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  // Fuzzy Finder
  // "find-it-faster.general.useTerminalInEditor": true,
  // Zen Mode
  "zenMode.centerLayout": false,
  // "zenMode.showTabs": "none",
  "zenMode.fullScreen": true,
  "zenMode.hideStatusBar": false,
  "zenMode.hideActivityBar": true,
  "zenMode.hideLineNumbers": true,
  "window.commandCenter": false,
  "workbench.layoutControl.enabled": false,
  "workbench.activityBar.location": "hidden",
  "C_Cpp.intelliSenseEngine": "disabled",
  "github.copilot.enable": {
    "*": false,
    "plaintext": false,
    "markdown": false,
    "scminput": false
  },
  "breadcrumbs.enabled": false,
  "gitlens.ai.model": "vscode",
  "gitlens.ai.vscode.model": "copilot:gpt-4.1",
  "gitlens.graph.minimap.enabled": false
}
