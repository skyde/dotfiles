set hidden true
set preview true
set icons true
set drawbox true
set previewer ~/.config/lf/lf-scrollingpreview-previewer
set cleaner ~/.config/lf/cleaner.sh
set info size
set number true
set relativenumber true
set ratios 1:4:3
set ignorecase true
set ifs "\n"
set filesep "\n"

# Sort by modification time (newest first)
set sortby time
set reverse true

map <esc> quit
map x cut
map y copy
map p paste
map d delete
map D delete!
map O push :mkdir<space>
map o push :touch<space>
map i rename
map c rename
map v toggle
map V toggle
map a unselect
map f search
map t search
map gm cd ~/.local/share/chezmoi
map go cd ~/Documents
map gd cd ~/Downloads
map gp cd ~/Projects
map ge cd ~/Desktop
map gv cd ~/.config/Code/User
map gn cd ~/.config/nvim
map gs cd ~/dotfiles

# Context-aware file opening (no custom env; detect VS Code via TERM_PROGRAM/VSCODE_* vars)
cmd open ${{
	# If running inside VS Code integrated terminal, open in VS Code
	if [ "$TERM_PROGRAM" = "vscode" ] || [ -n "$VSCODE_PID" ] || [ -n "$VSCODE_GIT_IPC_HANDLE" ]; then
		code -r -- $fx
	else
		# Default: open in neovim and quit lf
		lf -remote "send $id quit"
		nvim -- $fx
	fi
}}

# Open files with macOS default application (e.g., PDFs in Preview)
cmd open-default ${{
	open -- $fx
}}

# Open in the default system external program
map e open-default

# Create files/dirs via shell, joining args by space for convenience
cmd mkdir %IFS=" "; mkdir -- "$*"
cmd touch %IFS=" "; touch -- "$*"

# Make Enter open files/dirs, but Right Arrow only enters directories
map <enter> open
cmd open-dir-only &{{
	if [ -d "$f" ]; then
		lf -remote "send $id open"
	fi
}}
map <right> open-dir-only

# -- Preview scroll commands (improved, flicker-free) --
cmd scrolldown &{{
	file="$f"
	cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/lf/preview"
	mkdir -p "$cache_dir"

	# Compatible hash on macOS (shasum) and Linux (sha1sum)
	if command -v sha1sum >/dev/null 2>&1; then
		key="$(printf '%s' "$file" | sha1sum | awk '{print $1}')"
	else
		key="$(printf '%s' "$file" | shasum -a 1 | awk '{print $1}')"
	fi
	state="$cache_dir/$key.scroll"

	# Read current offset, increment by 5 lines
	offset="$(cat "$state" 2>/dev/null || printf '0')"
	new=$((offset + 5))
	printf '%s' "$new" >"$state"

	# Trigger reload to refresh preview
	lf -remote "send $id reload"
}}

cmd scrollup &{{
	file="$f"
	cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/lf/preview"
	mkdir -p "$cache_dir"

	# Compatible hash on macOS (shasum) and Linux (sha1sum)
	if command -v sha1sum >/dev/null 2>&1; then
		key="$(printf '%s' "$file" | sha1sum | awk '{print $1}')"
	else
		key="$(printf '%s' "$file" | shasum -a 1 | awk '{print $1}')"
	fi
	state="$cache_dir/$key.scroll"

	# Read current offset, decrement by 5 lines (don't go below 0)
	offset="$(cat "$state" 2>/dev/null || printf '0')"
	new=$((offset - 5))
	[ "$new" -lt 0 ] && new=0
	printf '%s' "$new" >"$state"

	# Trigger reload to refresh preview
	lf -remote "send $id reload"
}}

# Map J/K to scroll down/up in preview
map J scrolldown
map K scrollup
map <c-d> scrolldown
map <c-u> scrollup
