#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<'USAGE'
Usage: gl_vsc_diff [OPTIONS] <BASE> <HEAD> [REPO]

Open a GitLens multi-file diff between BASE and HEAD in VS Code using the
vscode:// URL handler.

Options:
  -2, --two-dot       Use two-dot range (BASE..HEAD)
  -3, --three-dot     Use three-dot range (BASE...HEAD) [default]
      --repo-id ID    Explicit GitLens repoId to use
  -h, --help          Show this help message

If REPO is omitted the current Git repository root (or the current directory
when no repository is detected) is used.

The script looks for a repoId in the following order:
  1. --repo-id option
  2. git -C REPO config --get gitlens.repoId
  3. GITLENS_REPO_ID environment variable

Configure gitlens.repoId once per repository using:
  git config gitlens.repoId "<copied repoId>"
USAGE
}

err() {
  printf 'gl_vsc_diff: %s\n' "$1" >&2
}

if [[ $# -eq 0 ]]; then
  usage
  exit 1
fi

range_dots="..."
explicit_repo_id=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    -2|--two-dot)
      range_dots=".."
      shift
      ;;
    -3|--three-dot)
      range_dots="..."
      shift
      ;;
    --repo-id)
      if [[ $# -lt 2 ]]; then
        err "--repo-id requires a value"
        exit 1
      fi
      explicit_repo_id="$2"
      shift 2
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    --)
      shift
      break
      ;;
    -*)
      err "unknown option: $1"
      printf '\n'
      usage
      exit 1
      ;;
    *)
      break
      ;;
  esac
fi

if [[ $# -lt 2 || $# -gt 3 ]]; then
  usage
  exit 1
fi

base_ref="$1"
head_ref="$2"
shift 2

if [[ $# -gt 0 ]]; then
  repo_path="$1"
else
  if git rev-parse --show-toplevel >/dev/null 2>&1; then
    repo_path="$(git rev-parse --show-toplevel)"
  else
    repo_path="$(pwd)"
  fi
fi

if [[ ! -d "$repo_path" ]]; then
  err "repository path does not exist: $repo_path"
  exit 1
fi

repo_path="$(python3 - <<'PY'
import os, sys
path = os.path.abspath(sys.argv[1])
print(path)
PY
"$repo_path")"

urlencode() {
  python3 - "$1" "$2" <<'PY'
import sys
from urllib.parse import quote
value = sys.argv[1]
safe = sys.argv[2]
print(quote(value, safe=safe))
PY
}

range_base="$(urlencode "$base_ref" '')"
range_head="$(urlencode "$head_ref" '')"
encoded_path="$(urlencode "$repo_path" '/:')"

repo_id="${explicit_repo_id:-}"
if [[ -z "$repo_id" ]]; then
  if git -C "$repo_path" config --get gitlens.repoId >/dev/null 2>&1; then
    repo_id="$(git -C "$repo_path" config --get gitlens.repoId)"
  fi
fi

if [[ -z "$repo_id" && -n "${GITLENS_REPO_ID:-}" ]]; then
  repo_id="$GITLENS_REPO_ID"
fi

if [[ -z "$repo_id" ]]; then
  err "GitLens repoId not configured. Use --repo-id, set gitlens.repoId, or export GITLENS_REPO_ID."
  exit 1
fi

repo_id="$(urlencode "$repo_id" '')"

url="vscode://eamodio.gitlens/r/${repo_id}/compare/${range_base}${range_dots}${range_head}?path=${encoded_path}"

open_url() {
  if command -v xdg-open >/dev/null 2>&1; then
    xdg-open "$1" >/dev/null 2>&1 &
    wait $! 2>/dev/null || true
    return 0
  fi
  if [[ "${OSTYPE:-}" == darwin* ]] && command -v open >/dev/null 2>&1; then
    open "$1"
    return 0
  fi
  if command -v code >/dev/null 2>&1; then
    code --open-url "$1"
    return 0
  fi
  if command -v powershell.exe >/dev/null 2>&1; then
    powershell.exe -NoProfile -Command "Start-Process '$1'" >/dev/null 2>&1
    return 0
  fi
  return 1
}

if ! open_url "$url"; then
  err "unable to open URL with xdg-open, open, code --open-url, or powershell"
  err "manually open: $url"
  exit 1
fi
