// Place your key bindings in this file to override the defaults
[
   // Disable line move shortcuts
  { "key": "alt+down", "command": "-editor.action.moveLinesDownAction" },
  { "key": "alt+up", "command": "-editor.action.moveLinesUpAction" },

  // ----- Word navigation on ⌘ + ← / → -----
  // Remove defaults (line start/end) that would conflict:
  { "key": "cmd+left",  "command": "-cursorHome", "when": "editorTextFocus" },
  { "key": "cmd+right", "command": "-cursorEnd",  "when": "editorTextFocus" },

  // New behavior: jump by word
  { "key": "cmd+left",  "command": "cursorWordStartLeft", "when": "editorTextFocus" },
  { "key": "cmd+right", "command": "cursorWordEndRight",  "when": "editorTextFocus" },

  // ----- LazyVim-style jumplist navigation -----
  // Remove defaults that conflict with these bindings.
  { "key": "cmd+o", "command": "-workbench.action.files.openFile" },
  { "key": "cmd+i", "command": "-editor.action.triggerSuggest" },
  { "key": "ctrl+i", "command": "-editor.action.triggerSuggest", "when": "editorHasCompletionItemProvider && editorTextFocus && !editorReadonly" },

  // Navigate backward/forward through editor history.
  { "key": "cmd+o", "command": "workbench.action.navigateBack" },
  { "key": "cmd+i", "command": "workbench.action.navigateForward" },
  { "key": "ctrl+o", "command": "workbench.action.navigateBack" },
  { "key": "ctrl+i", "command": "workbench.action.navigateForward" },

  // ----- Word deletion on ⌘ + Backspace / Delete -----
  // Remove defaults (delete to line start/end):
  { "key": "cmd+backspace", "command": "-deleteAllLeft",  "when": "editorTextFocus && !editorReadonly" },
  { "key": "cmd+delete",    "command": "-deleteAllRight", "when": "editorTextFocus && !editorReadonly" },

  // New behavior: delete one word left/right
  { "key": "cmd+backspace", "command": "deleteWordLeft",  "when": "editorTextFocus && !editorReadonly" },
  { "key": "cmd+delete",    "command": "deleteWordRight", "when": "editorTextFocus && !editorReadonly" },

  // ----- Selection variants (hold ⇧ to select by word) -----
  // Shift+Cmd+←/→ selects by word instead of line.
  { "key": "shift+cmd+left",  "command": "-cursorHomeSelect", "when": "editorTextFocus" },
  { "key": "shift+cmd+right", "command": "-cursorEndSelect",  "when": "editorTextFocus" },
  { "key": "shift+cmd+left",  "command": "cursorWordStartLeftSelect", "when": "editorTextFocus" },
  { "key": "shift+cmd+right", "command": "cursorWordEndRightSelect",  "when": "editorTextFocus" },

  { "key": "enter",      "command": "-renameFile",         "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus" },
  { "key": "enter",      "command": "list.select",         "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus" },
  { "key": "cmd+enter",  "command": "renameFile",          "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus" },
  { "key": "ctrl+enter", "command": "explorer.openToSide", "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus" },
  
  // Scroll up 16 Lines
  {
    "key": "cmd+u",
    "command": "runCommands",
    "when": "textInputFocus && vim.mode == 'Normal'",
    "args": {
      "commands": [
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp"
      ]
    }
  },
  // Scroll up 16 Lines (Shift+K alias for Cmd+U)
  {
    "key": "shift+k",
    "command": "runCommands",
    "when": "textInputFocus && vim.mode == 'Normal'",
    "args": {
      "commands": [
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp"
      ]
    }
  },
  // Scroll down 16 Lines
  {
    "key": "cmd+d",
    "command": "runCommands",
    "when": "textInputFocus && vim.mode == 'Normal'",
    "args": {
      "commands": [
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown"
      ]
    }
  },
  // Scroll down 16 Lines (Shift+J alias for Cmd+D)
  {
    "key": "shift+j",
    "command": "runCommands",
    "when": "textInputFocus && vim.mode == 'Normal'",
    "args": {
      "commands": [
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown"
      ]
    }
  },

  // Left Side Bar (Explorer/SCM/Extensions...)
  { "key": "cmd+b",  "command": "workbench.action.toggleSidebarVisibility" },

  // Toggle Explorer with Space e
  { "key": "space e", "command": "workbench.action.closeSidebar", "when": "explorerViewletVisible && filesExplorerFocus && !editorTextFocus" },

  // Bottom Panel (Terminal/Problems/Output/Debug Console) — default toggle
  { "key": "cmd+j", "command": "workbench.action.togglePanel" },

  // Unified right side: Secondary Side Bar — toggle
  { "key": "cmd+;",  "command": "workbench.action.toggleAuxiliaryBar" },

  // Focus editor directly
  { "key": "cmd+k",  "command": "workbench.action.focusActiveEditorGroup" },




  // Disable line move shortcuts
  { "key": "alt+down", "command": "-editor.action.moveLinesDownAction" },
  { "key": "alt+up", "command": "-editor.action.moveLinesUpAction" },
  {
    // Ctrl left to jump words
    "key": "ctrl+left",
    "command": "cursorWordStartLeft",
    "when": "editorTextFocus"
  },
  {
    // Ctrl right to jump words
    "key": "ctrl+right",
    "command": "cursorWordEndRight",
    "when": "editorTextFocus"
  },
  // Page Down - workround to make cursor movement match Nvim
  {
    "key": "pagedown",
    "command": "runCommands",
    "when": "textInputFocus",
    "args": {
      "commands": [
        "scrollPageDown",
        {
          "command": "cursorMove",
          "args": { "to": "viewPortTop", "by": "line" }
        },
        // This makes it so that if you move in a direction your cursor will 'follow' you
        // This moves the cursor down from the top of the screen to match 'cursor surrounding lines' in settings.json
        // Some custom logic is required to get this to work fully in VSCode to match NVim, if you don't do this the
        // navigation by paging is very confusing since doing an edit will then jump you back to where you were a long time ago.
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown"
      ]
    }
  },

  // Page Up - workround to make cursor movement match Nvim
  {
    "key": "pageup",
    "command": "runCommands",
    "when": "textInputFocus",
    "args": {
      "commands": [
        "scrollPageUp",
        {
          "command": "cursorMove",
          "args": { "to": "viewPortBottom", "by": "line" }
        },
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp"
      ]
    }
  },
  // Build
  {
    "key": "shift+f2",
    "command": "workbench.action.debug.start",
    "when": "taskCommandsRegistered"
  },
  // Fuzzy find class / file by name
  {
    "key": "shift+f3",
    "command": "workbench.action.quickOpen"
  },
  // Scroll up 16 Lines
  // Matches Nvim where small scrolls will keep the cursor in exacty the same relative place on the screen
  {
    "key": "shift+f4",
    "command": "runCommands",
    "when": "textInputFocus",
    "args": {
      "commands": [
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp"
      ]
    }
  },
  // Scroll down 16 Lines
  {
    "key": "shift+f6",
    "command": "runCommands",
    "when": "textInputFocus",
    "args": {
      "commands": [
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown"
      ]
    }
  },
  // Stop Build / Stop Debugging
  {
    "key": "shift+f7",
    "command": "runCommands",
    "args": {
      "commands": [
        // "workbench.action.tasks.terminate",
        "workbench.action.debug.stop"
      ]
    }
  },
  // Goto Definition
  {
    "key": "shift+f8",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus"
  },
  // Toggle Comment
  {
    "key": "shift+f11",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus"
  },
  // Change within current file
  // Makes the standard cmd-f shortcut map to the / key
  // Useful as I have a macro mapped to cmd-f
  {
    "key": "cmd+f",
    "command": "runCommands",
    "when": "editorTextFocus",
    "args": {
      "commands": [
        "extension.vim_escape",
        {
          "command": "vim.remap",
          "args": { "after": ["/"] }
        }
      ]
    }
  },
  // Global search: forward to VSCodeVim mapping
  {
    "key": "shift+cmd+f",
    "command": "runCommands",
    "when": "editorTextFocus",
    "args": {
      "commands": [
        // Ensure Normal mode
        "extension.vim_escape",
        { "command": "vim.remap", "args": { "after": ["<leader>", "s", "g"] } }
      ]
    }
  },
  // Show terminal commands
  {
    // Show the bottom panel if it's not visible
    "key": "ctrl+/",
    "command": "runCommands",
    "when": "!panelVisible",
    "args": {
      "commands": ["workbench.action.terminal.toggleTerminal"]
    }
  },
  {
    // Hide the panel if it's visible
    "key": "ctrl+/",
    "command": "runCommands",
    "when": "panelVisible",
    "args": {
      "commands": ["workbench.action.togglePanel"]
    }
  },
  {
    // Close the editor terminal as soon as ctrl+/ is pressed - things that launch into there should be transient
    "key": "ctrl+/",
    "command": "runCommands",
    "when": "terminalFocus && terminalEditorActive",
    "args": {
      "commands": [
        "workbench.action.unpinEditor",
        "workbench.action.revertAndCloseActiveEditor"
      ]
    }
  },
  // Show terminal commands to run with ctrl+t as well
  {
    // Show the bottom panel if it's not visible
    "key": "ctrl+t",
    "command": "runCommands",
    "when": "!panelVisible",
    "args": {
      "commands": ["workbench.action.terminal.toggleTerminal"]
    }
  },
  {
    // Hide the panel if it's visible
    "key": "ctrl+t",
    "command": "runCommands",
    "when": "panelVisible",
    "args": {
      "commands": ["workbench.action.togglePanel"]
    }
  },
  {
    // Close the editor terminal as soon as ctrl+/ is pressed - things that launch into there should be transient
    "key": "ctrl+t",
    "command": "runCommands",
    "when": "terminalFocus && terminalEditorActive",
    "args": {
      "commands": [
        "workbench.action.unpinEditor",
        "workbench.action.revertAndCloseActiveEditor"
      ]
    }
  },
  // Additonal terminal shortcuts
  {
    "key": "ctrl+m",
    "command": "runCommands",
    "when": "terminalFocus",
    "args": {
      "commands": ["workbench.action.toggleMaximizedPanel"]
    }
  },
  {
    "key": "ctrl+q",
    "command": "runCommands",
    "when": "terminalFocus",
    "args": {
      "commands": [
        "workbench.action.terminal.kill",
        // Closing a terminal can 'open' the next one
        // In practice this means that custom state that was set on open of the previous terminal is cleared
        "task.custom.openTerminal"
      ]
    }
  },
  // File explorer & Git
  // {
  //   "command": "workbench.action.toggleSidebarVisibility",
  //   "key": "escape",
  //   "when": "sideBarVisible && !editorFocus"
  // },
  {
    "command": "workbench.action.focusActiveEditorGroup",
    "key": "escape",
    "when": "(sideBarVisible || auxiliaryBarVisible) && !editorFocus && !terminalFocus"
  },
  // // Copilot Chat
  // {
  //   // Focus back to the editor
  //   "key": "escape",
  //   "command": "workbench.action.focusActiveEditorGroup",
  //   "when": "inputFocus && view.workbench.panel.chat.view.copilot.visible && !editorFocus && !terminalFocus"
  // },
  // Explorer
  {
    "key": "o",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "command": "renameFile",
    "key": "i",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "r",
    "command": "renameFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+i",
    "command": "explorer.newFolder",
    "when": "explorerViewletFocus"
  },
  {
    "command": "deleteFile",
    "key": "d",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // Yazi-style navigation in Explorer
  {
    "key": "j",
    "command": "list.focusDown",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "k",
    "command": "list.focusUp",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // {
  //   "key": "g g",
  //   "command": "list.focusFirst",
  //   "when": "filesExplorerFocus && !inputFocus"
  // },
  // {
  //   "key": "shift+g",
  //   "command": "list.focusLast",
  //   "when": "filesExplorerFocus && !inputFocus"
  // },
  // {
  //   "key": "ctrl+d",
  //   "command": "list.focusPageDown",
  //   "when": "filesExplorerFocus && !inputFocus"
  // },
  // {
  //   "key": "ctrl+u",
  //   "command": "list.focusPageUp",
  //   "when": "filesExplorerFocus && !inputFocus"
  // },
  {
    // l = open file (leaf nodes)
    "key": "l",
    "command": "list.select",
    "when": "filesExplorerFocus && !inputFocus && !treeElementCanExpand && !treeElementCanCollapse"
  },
  {
    // l = toggle expand/collapse for folders
    "key": "l",
    "command": "list.toggleExpand",
    "when": "filesExplorerFocus && !inputFocus && (treeElementCanExpand || treeElementCanCollapse)"
  },
  {
    // h = collapse folder if possible
    "key": "h",
    "command": "list.collapse",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // {
  //   // Backspace behaves like h
  //   "key": "backspace",
  // "command": "list.collapse",
  // "when": "filesExplorerFocus && !inputFocus"
  // },
  // {
  //   // Space toggles expand/collapse quickly (handy for folders)
  //   "key": "space",
  //   "command": "list.toggleExpand",
  //   "when": "filesExplorerFocus && !inputFocus && (treeElementCanExpand || treeElementCanCollapse)"
  // },
  {
    // v = toggle selection (Yazi-style multi-select)
    "key": "v",
    "command": "list.toggleSelection",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // {
  //   // a = select all (Yazi-style)
  //   "key": "a",
  //   "command": "list.selectAll",
  //   "when": "filesExplorerFocus && !inputFocus"
  // },
  {
    // s = open to side (leaf nodes)
    "key": "s",
    "command": "explorer.openToSide",
    "when": "filesExplorerFocus && !inputFocus && !treeElementCanExpand && !treeElementCanCollapse"
  },
  {
    // Copy/Cut/Paste like yazi (y, x, p)
    "key": "y",
    "command": "filesExplorer.copy",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "x",
    "command": "filesExplorer.cut",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    // Open the highlighted file in the Explorer with Enter (only for files, not folders)
    "key": "enter",
    "command": "list.select",
    "when": "filesExplorerFocus && !inputFocus && !treeElementCanExpand && !treeElementCanCollapse"
  },
  {
    // Enter on a folder toggles expand/collapse (Yazi-style)
    "key": "enter",
    "command": "list.toggleExpand",
    "when": "filesExplorerFocus && !inputFocus && (treeElementCanExpand || treeElementCanCollapse)"
  },
  // Diff
  {
    // Goto next change
    "key": "alt+down",
    "command": "workbench.action.compareEditor.nextChange",
    "when": "textCompareEditorVisible && editorTextFocus"
  },
  {
    // Goto previous change
    "key": "alt+up",
    "command": "workbench.action.compareEditor.previousChange",
    "when": "textCompareEditorVisible && editorTextFocus"
  },

  // Merging
  {
    "key": "alt+down",
    "command": "merge.goToNextUnhandledConflict",
    "when": "isMergeEditor"
  },
  {
    "key": "alt+up",
    "command": "merge.goToPreviousUnhandledConflict",
    "when": "isMergeEditor"
  },
  // Debug Navigation
  {
    "key": "alt+down",
    "command": "workbench.action.debug.stepOver",
    "when": "inDebugMode && debugState == 'stopped' && editorTextFocus"
  },
  {
    "key": "alt+up",
    "command": "workbench.action.debug.stepInto",
    "when": "inDebugMode && debugState == 'stopped' && editorTextFocus"
  },
  {
    "key": "alt+h",
    "command": "workbench.action.debug.stepOut",
    "when": "inDebugMode && debugState == 'stopped' && editorTextFocus"
  },
  // Selection
  {
    "key": "ctrl-n",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
  },
  // Editor terminal
  {
    "key": "ctrl+tab",
    "command": "workbench.action.nextEditor",
    "when": "isWindows"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.previousEditor",
    "when": "isWindows"
  },
  {
    "key": "cmd+s",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u001B[15;2~" }, // sends Shift‑F5
    "when": "terminalFocus"
  },
  {
    "key": "alt+o",
    "command": "clangd.switchheadersource",
    "when": "editorTextFocus && resourceLangId == 'c' || editorTextFocus && resourceLangId == 'cpp' || editorTextFocus && resourceLangId == 'cuda-cpp' || editorTextFocus && resourceLangId == 'objective-c' || editorTextFocus && resourceLangId == 'objective-cpp'"
  },
  {
    // This fixes an issue where when going to definition VS Code selects text unexpectedly
    "key": "enter",
    "command": "runCommands",
    "args": {
      "commands": ["revealReference", "extension.vim_escape"]
    },
    "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused"
    // "when": "referenceSearchVisible && !config.editor.stablePeek"
  },
  {
    // When opening files from terminal it leaves the terminal in a half open state at the bottom of the screen - close this if required
    "key": "enter",
    "command": "runCommands",
    "when": "(terminalFocus || problemFocus) && closePanelOnEnter",
    "args": {
      "commands": [
        {
          // Send the enter keycode
          "command": "workbench.action.terminal.sendSequence",
          // Enter keycode
          "args": { "text": "\u000D" }
        },
        // Close the terminal
        "workbench.action.togglePanel",
        "extension.vim_escape"
      ]
    }
  }
  // {
  //   // There is an issue in the find it faster plugin where it does go back to your last focused window when closed
  //   "key": "escape",
  //   "command": "runCommands",
  //   // This only activates when the 'editor as a tab' mode is active. Would be better to
  //   "when": "terminalFocus && terminalEditorActive",
  //   "args": {
  //     "commands": [
  //       {
  //         "command": "workbench.action.terminal.sendSequence",
  //         // Enter keycode
  //         "args": { "text": "\u001D" }
  //       }
  //       // "workbench.action.focusActiveEditorGroup",
  //       // "workbench.action.navigateBack",
  //       // "extension.vim_escape"
  //     ]
  //   }
  // }
]
